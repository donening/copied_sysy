Terminals unused in grammar

    T_CHAR
    CONST


State 74 conflicts: 2 shift/reduce
State 75 conflicts: 3 shift/reduce
State 81 conflicts: 1 shift/reduce
State 84 conflicts: 1 shift/reduce
State 85 conflicts: 1 shift/reduce
State 86 conflicts: 6 shift/reduce
State 148 conflicts: 3 shift/reduce
State 149 conflicts: 3 shift/reduce
State 171 conflicts: 18 shift/reduce
State 172 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: decl
    2        | funcDef
    3        | program decl
    4        | program funcDef

    5 basicType: T_INT
    6          | T_VOID

    7 literalConst: INTEGER

    8 compIdentifier: pIdentifier
    9               | arrayIdentifier

   10 pIdentifier: identifier
   11            | MUL pIdentifier
   12            | ADDR pIdentifier

   13 arrayIdentifier: pIdentifier LBRACKET expr RBRACKET
   14                | arrayIdentifier LBRACKET expr RBRACKET

   15 identifier: IDENTIFIER

   16 declCompIdentifier: pDeclIdentifier
   17                   | arrayDeclIdentifier

   18 pDeclIdentifier: declIdentifier
   19                | MUL pDeclIdentifier
   20                | ADDR pDeclIdentifier

   21 arrayDeclIdentifier: pDeclIdentifier LBRACKET INTEGER RBRACKET
   22                    | arrayDeclIdentifier LBRACKET INTEGER RBRACKET

   23 declIdentifier: IDENTIFIER

   24 decl: varDecl

   25 varDecl: basicType varDefs SEMICOLON

   26 varDefs: varDef
   27        | varDefs COMMA varDef

   28 varDef: declCompIdentifier

   29 funcDef: basicType pDeclIdentifier funcLPAREN funcFParams RPAREN LBRACE blockItems RBRACE
   30        | basicType pDeclIdentifier funcLPAREN RPAREN LBRACE blockItems RBRACE

   31 funcLPAREN: LPAREN

   32 funcFParams: funcFParam
   33            | funcFParams COMMA funcFParam

   34 funcFParam: basicType pDeclIdentifier

   35 block: blockLBRACE blockItems blockRBRACE

   36 blockLBRACE: LBRACE

   37 blockRBRACE: RBRACE

   38 blockItems: blockItem
   39           | blockItems blockItem

   40 blockItem: decl
   41          | stmt

   42 stmt_: LBRACE blockItems RBRACE
   43      | stmt

   44 stmt: SEMICOLON
   45     | expr SEMICOLON
   46     | block
   47     | IF LPAREN cond RPAREN stmt_ ELSE stmt_
   48     | IF LPAREN cond RPAREN stmt_
   49     | WHILE LPAREN cond RPAREN stmt_
   50     | FOR LPAREN basicType varDefs SEMICOLON cond SEMICOLON expr RPAREN stmt_
   51     | FOR LPAREN expr SEMICOLON cond SEMICOLON expr RPAREN stmt_
   52     | BREAK SEMICOLON
   53     | CONTINUE SEMICOLON
   54     | RETURN SEMICOLON
   55     | RETURN expr SEMICOLON

   56 IF: IF_

   57 WHILE: WHILE_

   58 FOR: FOR_

   59 expr: addExpr
   60     | compIdentifier ASSIGN expr
   61     | compIdentifier PLUSASSIGN expr
   62     | compIdentifier MINUSASSIGN expr
   63     | compIdentifier MULASSIGN expr
   64     | compIdentifier DIVASSIGN expr

   65 cond: LOrExpr

   66 addExpr: mulExpr
   67        | addExpr PLUS mulExpr
   68        | addExpr MINUS mulExpr

   69 mulExpr: unaryExpr
   70        | mulExpr MUL unaryExpr
   71        | mulExpr DIV unaryExpr
   72        | mulExpr MOD unaryExpr

   73 unaryExpr: primaryExpr
   74          | NOT cond
   75          | PLUS primaryExpr
   76          | MINUS primaryExpr
   77          | pIdentifier INC
   78          | pIdentifier DEC

   79 primaryExpr: literalConst
   80            | LPAREN expr RPAREN
   81            | LPAREN cond RPAREN
   82            | pIdentifier LPAREN funcRParams RPAREN
   83            | pIdentifier LPAREN RPAREN
   84            | compIdentifier

   85 funcRParams: expr
   86            | funcRParams COMMA expr

   87 LOrExpr: LAndExpr
   88        | LAndExpr OR LOrExpr

   89 LAndExpr: eqExpr
   90         | eqExpr AND LAndExpr

   91 eqExpr: relExpr
   92       | relExpr EQ eqExpr
   93       | relExpr NEQ eqExpr

   94 relExpr: expr
   95        | relExpr GRA expr
   96        | relExpr LES expr
   97        | relExpr GRAEQ expr
   98        | relExpr LESEQ expr


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    T_CHAR (258)
    T_INT (259) 5
    T_VOID (260) 6
    ADDR (261) 12 20
    ASSIGN (262) 60
    PLUSASSIGN (263) 61
    MINUSASSIGN (264) 62
    MULASSIGN (265) 63
    DIVASSIGN (266) 64
    SEMICOLON (267) 25 44 45 50 51 52 53 54 55
    COMMA (268) 27 33 86
    LPAREN (269) 31 47 48 49 50 51 80 81 82 83
    RPAREN (270) 29 30 47 48 49 50 51 80 81 82 83
    LBRACE (271) 29 30 36 42
    RBRACE (272) 29 30 37 42
    LBRACKET (273) 13 14 21 22
    RBRACKET (274) 13 14 21 22
    CONST (275)
    IF_ (276) 56
    ELSE (277) 47
    WHILE_ (278) 57
    FOR_ (279) 58
    BREAK (280) 52
    CONTINUE (281) 53
    RETURN (282) 54 55
    EQ (283) 92
    GRAEQ (284) 97
    LESEQ (285) 98
    NEQ (286) 93
    GRA (287) 95
    LES (288) 96
    PLUS (289) 67 75
    MINUS (290) 68 76
    MUL (291) 11 19 70
    DIV (292) 71
    MOD (293) 72
    AND (294) 90
    OR (295) 88
    NOT (296) 74
    INC (297) 77
    DEC (298) 78
    IDENTIFIER (299) 15 23
    INTEGER (300) 7 21 22


Nonterminals, with rules where they appear

    $accept (46)
        on left: 0
    program (47)
        on left: 1 2 3 4
        on right: 0 3 4
    basicType (48)
        on left: 5 6
        on right: 25 29 30 34 50
    literalConst (49)
        on left: 7
        on right: 79
    compIdentifier (50)
        on left: 8 9
        on right: 60 61 62 63 64 84
    pIdentifier (51)
        on left: 10 11 12
        on right: 8 11 12 13 77 78 82 83
    arrayIdentifier (52)
        on left: 13 14
        on right: 9 14
    identifier (53)
        on left: 15
        on right: 10
    declCompIdentifier (54)
        on left: 16 17
        on right: 28
    pDeclIdentifier (55)
        on left: 18 19 20
        on right: 16 19 20 21 29 30 34
    arrayDeclIdentifier (56)
        on left: 21 22
        on right: 17 22
    declIdentifier (57)
        on left: 23
        on right: 18
    decl (58)
        on left: 24
        on right: 1 3 40
    varDecl (59)
        on left: 25
        on right: 24
    varDefs (60)
        on left: 26 27
        on right: 25 27 50
    varDef (61)
        on left: 28
        on right: 26 27
    funcDef (62)
        on left: 29 30
        on right: 2 4
    funcLPAREN (63)
        on left: 31
        on right: 29 30
    funcFParams (64)
        on left: 32 33
        on right: 29 33
    funcFParam (65)
        on left: 34
        on right: 32 33
    block (66)
        on left: 35
        on right: 46
    blockLBRACE (67)
        on left: 36
        on right: 35
    blockRBRACE (68)
        on left: 37
        on right: 35
    blockItems (69)
        on left: 38 39
        on right: 29 30 35 39 42
    blockItem (70)
        on left: 40 41
        on right: 38 39
    stmt_ (71)
        on left: 42 43
        on right: 47 48 49 50 51
    stmt (72)
        on left: 44 45 46 47 48 49 50 51 52 53 54 55
        on right: 41 43
    IF (73)
        on left: 56
        on right: 47 48
    WHILE (74)
        on left: 57
        on right: 49
    FOR (75)
        on left: 58
        on right: 50 51
    expr (76)
        on left: 59 60 61 62 63 64
        on right: 13 14 45 50 51 55 60 61 62 63 64 80 85 86 94 95 96 97 98
    cond (77)
        on left: 65
        on right: 47 48 49 50 51 74 81
    addExpr (78)
        on left: 66 67 68
        on right: 59 67 68
    mulExpr (79)
        on left: 69 70 71 72
        on right: 66 67 68 70 71 72
    unaryExpr (80)
        on left: 73 74 75 76 77 78
        on right: 69 70 71 72
    primaryExpr (81)
        on left: 79 80 81 82 83 84
        on right: 73 75 76
    funcRParams (82)
        on left: 85 86
        on right: 82 86
    LOrExpr (83)
        on left: 87 88
        on right: 65 88
    LAndExpr (84)
        on left: 89 90
        on right: 87 88 90
    eqExpr (85)
        on left: 91 92 93
        on right: 89 90 92 93
    relExpr (86)
        on left: 94 95 96 97 98
        on right: 91 92 93 95 96 97 98


State 0

    0 $accept: • program $end

    T_INT   shift, and go to state 1
    T_VOID  shift, and go to state 2

    program    go to state 3
    basicType  go to state 4
    decl       go to state 5
    varDecl    go to state 6
    funcDef    go to state 7


State 1

    5 basicType: T_INT •

    $default  reduce using rule 5 (basicType)


State 2

    6 basicType: T_VOID •

    $default  reduce using rule 6 (basicType)


State 3

    0 $accept: program • $end
    3 program: program • decl
    4        | program • funcDef

    $end    shift, and go to state 8
    T_INT   shift, and go to state 1
    T_VOID  shift, and go to state 2

    basicType  go to state 4
    decl       go to state 9
    varDecl    go to state 6
    funcDef    go to state 10


State 4

   25 varDecl: basicType • varDefs SEMICOLON
   29 funcDef: basicType • pDeclIdentifier funcLPAREN funcFParams RPAREN LBRACE blockItems RBRACE
   30        | basicType • pDeclIdentifier funcLPAREN RPAREN LBRACE blockItems RBRACE

    ADDR        shift, and go to state 11
    MUL         shift, and go to state 12
    IDENTIFIER  shift, and go to state 13

    declCompIdentifier   go to state 14
    pDeclIdentifier      go to state 15
    arrayDeclIdentifier  go to state 16
    declIdentifier       go to state 17
    varDefs              go to state 18
    varDef               go to state 19


State 5

    1 program: decl •

    $default  reduce using rule 1 (program)


State 6

   24 decl: varDecl •

    $default  reduce using rule 24 (decl)


State 7

    2 program: funcDef •

    $default  reduce using rule 2 (program)


State 8

    0 $accept: program $end •

    $default  accept


State 9

    3 program: program decl •

    $default  reduce using rule 3 (program)


State 10

    4 program: program funcDef •

    $default  reduce using rule 4 (program)


State 11

   20 pDeclIdentifier: ADDR • pDeclIdentifier

    ADDR        shift, and go to state 11
    MUL         shift, and go to state 12
    IDENTIFIER  shift, and go to state 13

    pDeclIdentifier  go to state 20
    declIdentifier   go to state 17


State 12

   19 pDeclIdentifier: MUL • pDeclIdentifier

    ADDR        shift, and go to state 11
    MUL         shift, and go to state 12
    IDENTIFIER  shift, and go to state 13

    pDeclIdentifier  go to state 21
    declIdentifier   go to state 17


State 13

   23 declIdentifier: IDENTIFIER •

    $default  reduce using rule 23 (declIdentifier)


State 14

   28 varDef: declCompIdentifier •

    $default  reduce using rule 28 (varDef)


State 15

   16 declCompIdentifier: pDeclIdentifier •
   21 arrayDeclIdentifier: pDeclIdentifier • LBRACKET INTEGER RBRACKET
   29 funcDef: basicType pDeclIdentifier • funcLPAREN funcFParams RPAREN LBRACE blockItems RBRACE
   30        | basicType pDeclIdentifier • funcLPAREN RPAREN LBRACE blockItems RBRACE

    LPAREN    shift, and go to state 22
    LBRACKET  shift, and go to state 23

    $default  reduce using rule 16 (declCompIdentifier)

    funcLPAREN  go to state 24


State 16

   17 declCompIdentifier: arrayDeclIdentifier •
   22 arrayDeclIdentifier: arrayDeclIdentifier • LBRACKET INTEGER RBRACKET

    LBRACKET  shift, and go to state 25

    $default  reduce using rule 17 (declCompIdentifier)


State 17

   18 pDeclIdentifier: declIdentifier •

    $default  reduce using rule 18 (pDeclIdentifier)


State 18

   25 varDecl: basicType varDefs • SEMICOLON
   27 varDefs: varDefs • COMMA varDef

    SEMICOLON  shift, and go to state 26
    COMMA      shift, and go to state 27


State 19

   26 varDefs: varDef •

    $default  reduce using rule 26 (varDefs)


State 20

   20 pDeclIdentifier: ADDR pDeclIdentifier •

    $default  reduce using rule 20 (pDeclIdentifier)


State 21

   19 pDeclIdentifier: MUL pDeclIdentifier •

    $default  reduce using rule 19 (pDeclIdentifier)


State 22

   31 funcLPAREN: LPAREN •

    $default  reduce using rule 31 (funcLPAREN)


State 23

   21 arrayDeclIdentifier: pDeclIdentifier LBRACKET • INTEGER RBRACKET

    INTEGER  shift, and go to state 28


State 24

   29 funcDef: basicType pDeclIdentifier funcLPAREN • funcFParams RPAREN LBRACE blockItems RBRACE
   30        | basicType pDeclIdentifier funcLPAREN • RPAREN LBRACE blockItems RBRACE

    T_INT   shift, and go to state 1
    T_VOID  shift, and go to state 2
    RPAREN  shift, and go to state 29

    basicType    go to state 30
    funcFParams  go to state 31
    funcFParam   go to state 32


State 25

   22 arrayDeclIdentifier: arrayDeclIdentifier LBRACKET • INTEGER RBRACKET

    INTEGER  shift, and go to state 33


State 26

   25 varDecl: basicType varDefs SEMICOLON •

    $default  reduce using rule 25 (varDecl)


State 27

   27 varDefs: varDefs COMMA • varDef

    ADDR        shift, and go to state 11
    MUL         shift, and go to state 12
    IDENTIFIER  shift, and go to state 13

    declCompIdentifier   go to state 14
    pDeclIdentifier      go to state 34
    arrayDeclIdentifier  go to state 16
    declIdentifier       go to state 17
    varDef               go to state 35


State 28

   21 arrayDeclIdentifier: pDeclIdentifier LBRACKET INTEGER • RBRACKET

    RBRACKET  shift, and go to state 36


State 29

   30 funcDef: basicType pDeclIdentifier funcLPAREN RPAREN • LBRACE blockItems RBRACE

    LBRACE  shift, and go to state 37


State 30

   34 funcFParam: basicType • pDeclIdentifier

    ADDR        shift, and go to state 11
    MUL         shift, and go to state 12
    IDENTIFIER  shift, and go to state 13

    pDeclIdentifier  go to state 38
    declIdentifier   go to state 17


State 31

   29 funcDef: basicType pDeclIdentifier funcLPAREN funcFParams • RPAREN LBRACE blockItems RBRACE
   33 funcFParams: funcFParams • COMMA funcFParam

    COMMA   shift, and go to state 39
    RPAREN  shift, and go to state 40


State 32

   32 funcFParams: funcFParam •

    $default  reduce using rule 32 (funcFParams)


State 33

   22 arrayDeclIdentifier: arrayDeclIdentifier LBRACKET INTEGER • RBRACKET

    RBRACKET  shift, and go to state 41


State 34

   16 declCompIdentifier: pDeclIdentifier •
   21 arrayDeclIdentifier: pDeclIdentifier • LBRACKET INTEGER RBRACKET

    LBRACKET  shift, and go to state 23

    $default  reduce using rule 16 (declCompIdentifier)


State 35

   27 varDefs: varDefs COMMA varDef •

    $default  reduce using rule 27 (varDefs)


State 36

   21 arrayDeclIdentifier: pDeclIdentifier LBRACKET INTEGER RBRACKET •

    $default  reduce using rule 21 (arrayDeclIdentifier)


State 37

   30 funcDef: basicType pDeclIdentifier funcLPAREN RPAREN LBRACE • blockItems RBRACE

    T_INT       shift, and go to state 1
    T_VOID      shift, and go to state 2
    ADDR        shift, and go to state 42
    SEMICOLON   shift, and go to state 43
    LPAREN      shift, and go to state 44
    LBRACE      shift, and go to state 45
    IF_         shift, and go to state 46
    WHILE_      shift, and go to state 47
    FOR_        shift, and go to state 48
    BREAK       shift, and go to state 49
    CONTINUE    shift, and go to state 50
    RETURN      shift, and go to state 51
    PLUS        shift, and go to state 52
    MINUS       shift, and go to state 53
    MUL         shift, and go to state 54
    NOT         shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57

    basicType        go to state 58
    literalConst     go to state 59
    compIdentifier   go to state 60
    pIdentifier      go to state 61
    arrayIdentifier  go to state 62
    identifier       go to state 63
    decl             go to state 64
    varDecl          go to state 6
    block            go to state 65
    blockLBRACE      go to state 66
    blockItems       go to state 67
    blockItem        go to state 68
    stmt             go to state 69
    IF               go to state 70
    WHILE            go to state 71
    FOR              go to state 72
    expr             go to state 73
    addExpr          go to state 74
    mulExpr          go to state 75
    unaryExpr        go to state 76
    primaryExpr      go to state 77


State 38

   34 funcFParam: basicType pDeclIdentifier •

    $default  reduce using rule 34 (funcFParam)


State 39

   33 funcFParams: funcFParams COMMA • funcFParam

    T_INT   shift, and go to state 1
    T_VOID  shift, and go to state 2

    basicType   go to state 30
    funcFParam  go to state 78


State 40

   29 funcDef: basicType pDeclIdentifier funcLPAREN funcFParams RPAREN • LBRACE blockItems RBRACE

    LBRACE  shift, and go to state 79


State 41

   22 arrayDeclIdentifier: arrayDeclIdentifier LBRACKET INTEGER RBRACKET •

    $default  reduce using rule 22 (arrayDeclIdentifier)


State 42

   12 pIdentifier: ADDR • pIdentifier

    ADDR        shift, and go to state 42
    MUL         shift, and go to state 54
    IDENTIFIER  shift, and go to state 56

    pIdentifier  go to state 80
    identifier   go to state 63


State 43

   44 stmt: SEMICOLON •

    $default  reduce using rule 44 (stmt)


State 44

   80 primaryExpr: LPAREN • expr RPAREN
   81            | LPAREN • cond RPAREN

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 52
    MINUS       shift, and go to state 53
    MUL         shift, and go to state 54
    NOT         shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57

    literalConst     go to state 59
    compIdentifier   go to state 60
    pIdentifier      go to state 61
    arrayIdentifier  go to state 62
    identifier       go to state 63
    expr             go to state 81
    cond             go to state 82
    addExpr          go to state 74
    mulExpr          go to state 75
    unaryExpr        go to state 76
    primaryExpr      go to state 77
    LOrExpr          go to state 83
    LAndExpr         go to state 84
    eqExpr           go to state 85
    relExpr          go to state 86


State 45

   36 blockLBRACE: LBRACE •

    $default  reduce using rule 36 (blockLBRACE)


State 46

   56 IF: IF_ •

    $default  reduce using rule 56 (IF)


State 47

   57 WHILE: WHILE_ •

    $default  reduce using rule 57 (WHILE)


State 48

   58 FOR: FOR_ •

    $default  reduce using rule 58 (FOR)


State 49

   52 stmt: BREAK • SEMICOLON

    SEMICOLON  shift, and go to state 87


State 50

   53 stmt: CONTINUE • SEMICOLON

    SEMICOLON  shift, and go to state 88


State 51

   54 stmt: RETURN • SEMICOLON
   55     | RETURN • expr SEMICOLON

    ADDR        shift, and go to state 42
    SEMICOLON   shift, and go to state 89
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 52
    MINUS       shift, and go to state 53
    MUL         shift, and go to state 54
    NOT         shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57

    literalConst     go to state 59
    compIdentifier   go to state 60
    pIdentifier      go to state 61
    arrayIdentifier  go to state 62
    identifier       go to state 63
    expr             go to state 90
    addExpr          go to state 74
    mulExpr          go to state 75
    unaryExpr        go to state 76
    primaryExpr      go to state 77


State 52

   75 unaryExpr: PLUS • primaryExpr

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    MUL         shift, and go to state 54
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57

    literalConst     go to state 59
    compIdentifier   go to state 91
    pIdentifier      go to state 92
    arrayIdentifier  go to state 62
    identifier       go to state 63
    primaryExpr      go to state 93


State 53

   76 unaryExpr: MINUS • primaryExpr

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    MUL         shift, and go to state 54
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57

    literalConst     go to state 59
    compIdentifier   go to state 91
    pIdentifier      go to state 92
    arrayIdentifier  go to state 62
    identifier       go to state 63
    primaryExpr      go to state 94


State 54

   11 pIdentifier: MUL • pIdentifier

    ADDR        shift, and go to state 42
    MUL         shift, and go to state 54
    IDENTIFIER  shift, and go to state 56

    pIdentifier  go to state 95
    identifier   go to state 63


State 55

   74 unaryExpr: NOT • cond

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 52
    MINUS       shift, and go to state 53
    MUL         shift, and go to state 54
    NOT         shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57

    literalConst     go to state 59
    compIdentifier   go to state 60
    pIdentifier      go to state 61
    arrayIdentifier  go to state 62
    identifier       go to state 63
    expr             go to state 96
    cond             go to state 97
    addExpr          go to state 74
    mulExpr          go to state 75
    unaryExpr        go to state 76
    primaryExpr      go to state 77
    LOrExpr          go to state 83
    LAndExpr         go to state 84
    eqExpr           go to state 85
    relExpr          go to state 86


State 56

   15 identifier: IDENTIFIER •

    $default  reduce using rule 15 (identifier)


State 57

    7 literalConst: INTEGER •

    $default  reduce using rule 7 (literalConst)


State 58

   25 varDecl: basicType • varDefs SEMICOLON

    ADDR        shift, and go to state 11
    MUL         shift, and go to state 12
    IDENTIFIER  shift, and go to state 13

    declCompIdentifier   go to state 14
    pDeclIdentifier      go to state 34
    arrayDeclIdentifier  go to state 16
    declIdentifier       go to state 17
    varDefs              go to state 18
    varDef               go to state 19


State 59

   79 primaryExpr: literalConst •

    $default  reduce using rule 79 (primaryExpr)


State 60

   60 expr: compIdentifier • ASSIGN expr
   61     | compIdentifier • PLUSASSIGN expr
   62     | compIdentifier • MINUSASSIGN expr
   63     | compIdentifier • MULASSIGN expr
   64     | compIdentifier • DIVASSIGN expr
   84 primaryExpr: compIdentifier •

    ASSIGN       shift, and go to state 98
    PLUSASSIGN   shift, and go to state 99
    MINUSASSIGN  shift, and go to state 100
    MULASSIGN    shift, and go to state 101
    DIVASSIGN    shift, and go to state 102

    $default  reduce using rule 84 (primaryExpr)


State 61

    8 compIdentifier: pIdentifier •
   13 arrayIdentifier: pIdentifier • LBRACKET expr RBRACKET
   77 unaryExpr: pIdentifier • INC
   78          | pIdentifier • DEC
   82 primaryExpr: pIdentifier • LPAREN funcRParams RPAREN
   83            | pIdentifier • LPAREN RPAREN

    LPAREN    shift, and go to state 103
    LBRACKET  shift, and go to state 104
    INC       shift, and go to state 105
    DEC       shift, and go to state 106

    $default  reduce using rule 8 (compIdentifier)


State 62

    9 compIdentifier: arrayIdentifier •
   14 arrayIdentifier: arrayIdentifier • LBRACKET expr RBRACKET

    LBRACKET  shift, and go to state 107

    $default  reduce using rule 9 (compIdentifier)


State 63

   10 pIdentifier: identifier •

    $default  reduce using rule 10 (pIdentifier)


State 64

   40 blockItem: decl •

    $default  reduce using rule 40 (blockItem)


State 65

   46 stmt: block •

    $default  reduce using rule 46 (stmt)


State 66

   35 block: blockLBRACE • blockItems blockRBRACE

    T_INT       shift, and go to state 1
    T_VOID      shift, and go to state 2
    ADDR        shift, and go to state 42
    SEMICOLON   shift, and go to state 43
    LPAREN      shift, and go to state 44
    LBRACE      shift, and go to state 45
    IF_         shift, and go to state 46
    WHILE_      shift, and go to state 47
    FOR_        shift, and go to state 48
    BREAK       shift, and go to state 49
    CONTINUE    shift, and go to state 50
    RETURN      shift, and go to state 51
    PLUS        shift, and go to state 52
    MINUS       shift, and go to state 53
    MUL         shift, and go to state 54
    NOT         shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57

    basicType        go to state 58
    literalConst     go to state 59
    compIdentifier   go to state 60
    pIdentifier      go to state 61
    arrayIdentifier  go to state 62
    identifier       go to state 63
    decl             go to state 64
    varDecl          go to state 6
    block            go to state 65
    blockLBRACE      go to state 66
    blockItems       go to state 108
    blockItem        go to state 68
    stmt             go to state 69
    IF               go to state 70
    WHILE            go to state 71
    FOR              go to state 72
    expr             go to state 73
    addExpr          go to state 74
    mulExpr          go to state 75
    unaryExpr        go to state 76
    primaryExpr      go to state 77


State 67

   30 funcDef: basicType pDeclIdentifier funcLPAREN RPAREN LBRACE blockItems • RBRACE
   39 blockItems: blockItems • blockItem

    T_INT       shift, and go to state 1
    T_VOID      shift, and go to state 2
    ADDR        shift, and go to state 42
    SEMICOLON   shift, and go to state 43
    LPAREN      shift, and go to state 44
    LBRACE      shift, and go to state 45
    RBRACE      shift, and go to state 109
    IF_         shift, and go to state 46
    WHILE_      shift, and go to state 47
    FOR_        shift, and go to state 48
    BREAK       shift, and go to state 49
    CONTINUE    shift, and go to state 50
    RETURN      shift, and go to state 51
    PLUS        shift, and go to state 52
    MINUS       shift, and go to state 53
    MUL         shift, and go to state 54
    NOT         shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57

    basicType        go to state 58
    literalConst     go to state 59
    compIdentifier   go to state 60
    pIdentifier      go to state 61
    arrayIdentifier  go to state 62
    identifier       go to state 63
    decl             go to state 64
    varDecl          go to state 6
    block            go to state 65
    blockLBRACE      go to state 66
    blockItem        go to state 110
    stmt             go to state 69
    IF               go to state 70
    WHILE            go to state 71
    FOR              go to state 72
    expr             go to state 73
    addExpr          go to state 74
    mulExpr          go to state 75
    unaryExpr        go to state 76
    primaryExpr      go to state 77


State 68

   38 blockItems: blockItem •

    $default  reduce using rule 38 (blockItems)


State 69

   41 blockItem: stmt •

    $default  reduce using rule 41 (blockItem)


State 70

   47 stmt: IF • LPAREN cond RPAREN stmt_ ELSE stmt_
   48     | IF • LPAREN cond RPAREN stmt_

    LPAREN  shift, and go to state 111


State 71

   49 stmt: WHILE • LPAREN cond RPAREN stmt_

    LPAREN  shift, and go to state 112


State 72

   50 stmt: FOR • LPAREN basicType varDefs SEMICOLON cond SEMICOLON expr RPAREN stmt_
   51     | FOR • LPAREN expr SEMICOLON cond SEMICOLON expr RPAREN stmt_

    LPAREN  shift, and go to state 113


State 73

   45 stmt: expr • SEMICOLON

    SEMICOLON  shift, and go to state 114


State 74

   59 expr: addExpr •
   67 addExpr: addExpr • PLUS mulExpr
   68        | addExpr • MINUS mulExpr

    PLUS   shift, and go to state 115
    MINUS  shift, and go to state 116

    PLUS      [reduce using rule 59 (expr)]
    MINUS     [reduce using rule 59 (expr)]
    $default  reduce using rule 59 (expr)


State 75

   66 addExpr: mulExpr •
   70 mulExpr: mulExpr • MUL unaryExpr
   71        | mulExpr • DIV unaryExpr
   72        | mulExpr • MOD unaryExpr

    MUL  shift, and go to state 117
    DIV  shift, and go to state 118
    MOD  shift, and go to state 119

    MUL       [reduce using rule 66 (addExpr)]
    DIV       [reduce using rule 66 (addExpr)]
    MOD       [reduce using rule 66 (addExpr)]
    $default  reduce using rule 66 (addExpr)


State 76

   69 mulExpr: unaryExpr •

    $default  reduce using rule 69 (mulExpr)


State 77

   73 unaryExpr: primaryExpr •

    $default  reduce using rule 73 (unaryExpr)


State 78

   33 funcFParams: funcFParams COMMA funcFParam •

    $default  reduce using rule 33 (funcFParams)


State 79

   29 funcDef: basicType pDeclIdentifier funcLPAREN funcFParams RPAREN LBRACE • blockItems RBRACE

    T_INT       shift, and go to state 1
    T_VOID      shift, and go to state 2
    ADDR        shift, and go to state 42
    SEMICOLON   shift, and go to state 43
    LPAREN      shift, and go to state 44
    LBRACE      shift, and go to state 45
    IF_         shift, and go to state 46
    WHILE_      shift, and go to state 47
    FOR_        shift, and go to state 48
    BREAK       shift, and go to state 49
    CONTINUE    shift, and go to state 50
    RETURN      shift, and go to state 51
    PLUS        shift, and go to state 52
    MINUS       shift, and go to state 53
    MUL         shift, and go to state 54
    NOT         shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57

    basicType        go to state 58
    literalConst     go to state 59
    compIdentifier   go to state 60
    pIdentifier      go to state 61
    arrayIdentifier  go to state 62
    identifier       go to state 63
    decl             go to state 64
    varDecl          go to state 6
    block            go to state 65
    blockLBRACE      go to state 66
    blockItems       go to state 120
    blockItem        go to state 68
    stmt             go to state 69
    IF               go to state 70
    WHILE            go to state 71
    FOR              go to state 72
    expr             go to state 73
    addExpr          go to state 74
    mulExpr          go to state 75
    unaryExpr        go to state 76
    primaryExpr      go to state 77


State 80

   12 pIdentifier: ADDR pIdentifier •

    $default  reduce using rule 12 (pIdentifier)


State 81

   80 primaryExpr: LPAREN expr • RPAREN
   94 relExpr: expr •

    RPAREN  shift, and go to state 121

    RPAREN    [reduce using rule 94 (relExpr)]
    $default  reduce using rule 94 (relExpr)


State 82

   81 primaryExpr: LPAREN cond • RPAREN

    RPAREN  shift, and go to state 122


State 83

   65 cond: LOrExpr •

    $default  reduce using rule 65 (cond)


State 84

   87 LOrExpr: LAndExpr •
   88        | LAndExpr • OR LOrExpr

    OR  shift, and go to state 123

    OR        [reduce using rule 87 (LOrExpr)]
    $default  reduce using rule 87 (LOrExpr)


State 85

   89 LAndExpr: eqExpr •
   90         | eqExpr • AND LAndExpr

    AND  shift, and go to state 124

    AND       [reduce using rule 89 (LAndExpr)]
    $default  reduce using rule 89 (LAndExpr)


State 86

   91 eqExpr: relExpr •
   92       | relExpr • EQ eqExpr
   93       | relExpr • NEQ eqExpr
   95 relExpr: relExpr • GRA expr
   96        | relExpr • LES expr
   97        | relExpr • GRAEQ expr
   98        | relExpr • LESEQ expr

    EQ     shift, and go to state 125
    GRAEQ  shift, and go to state 126
    LESEQ  shift, and go to state 127
    NEQ    shift, and go to state 128
    GRA    shift, and go to state 129
    LES    shift, and go to state 130

    EQ        [reduce using rule 91 (eqExpr)]
    GRAEQ     [reduce using rule 91 (eqExpr)]
    LESEQ     [reduce using rule 91 (eqExpr)]
    NEQ       [reduce using rule 91 (eqExpr)]
    GRA       [reduce using rule 91 (eqExpr)]
    LES       [reduce using rule 91 (eqExpr)]
    $default  reduce using rule 91 (eqExpr)


State 87

   52 stmt: BREAK SEMICOLON •

    $default  reduce using rule 52 (stmt)


State 88

   53 stmt: CONTINUE SEMICOLON •

    $default  reduce using rule 53 (stmt)


State 89

   54 stmt: RETURN SEMICOLON •

    $default  reduce using rule 54 (stmt)


State 90

   55 stmt: RETURN expr • SEMICOLON

    SEMICOLON  shift, and go to state 131


State 91

   84 primaryExpr: compIdentifier •

    $default  reduce using rule 84 (primaryExpr)


State 92

    8 compIdentifier: pIdentifier •
   13 arrayIdentifier: pIdentifier • LBRACKET expr RBRACKET
   82 primaryExpr: pIdentifier • LPAREN funcRParams RPAREN
   83            | pIdentifier • LPAREN RPAREN

    LPAREN    shift, and go to state 103
    LBRACKET  shift, and go to state 104

    $default  reduce using rule 8 (compIdentifier)


State 93

   75 unaryExpr: PLUS primaryExpr •

    $default  reduce using rule 75 (unaryExpr)


State 94

   76 unaryExpr: MINUS primaryExpr •

    $default  reduce using rule 76 (unaryExpr)


State 95

   11 pIdentifier: MUL pIdentifier •

    $default  reduce using rule 11 (pIdentifier)


State 96

   94 relExpr: expr •

    $default  reduce using rule 94 (relExpr)


State 97

   74 unaryExpr: NOT cond •

    $default  reduce using rule 74 (unaryExpr)


State 98

   60 expr: compIdentifier ASSIGN • expr

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 52
    MINUS       shift, and go to state 53
    MUL         shift, and go to state 54
    NOT         shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57

    literalConst     go to state 59
    compIdentifier   go to state 60
    pIdentifier      go to state 61
    arrayIdentifier  go to state 62
    identifier       go to state 63
    expr             go to state 132
    addExpr          go to state 74
    mulExpr          go to state 75
    unaryExpr        go to state 76
    primaryExpr      go to state 77


State 99

   61 expr: compIdentifier PLUSASSIGN • expr

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 52
    MINUS       shift, and go to state 53
    MUL         shift, and go to state 54
    NOT         shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57

    literalConst     go to state 59
    compIdentifier   go to state 60
    pIdentifier      go to state 61
    arrayIdentifier  go to state 62
    identifier       go to state 63
    expr             go to state 133
    addExpr          go to state 74
    mulExpr          go to state 75
    unaryExpr        go to state 76
    primaryExpr      go to state 77


State 100

   62 expr: compIdentifier MINUSASSIGN • expr

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 52
    MINUS       shift, and go to state 53
    MUL         shift, and go to state 54
    NOT         shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57

    literalConst     go to state 59
    compIdentifier   go to state 60
    pIdentifier      go to state 61
    arrayIdentifier  go to state 62
    identifier       go to state 63
    expr             go to state 134
    addExpr          go to state 74
    mulExpr          go to state 75
    unaryExpr        go to state 76
    primaryExpr      go to state 77


State 101

   63 expr: compIdentifier MULASSIGN • expr

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 52
    MINUS       shift, and go to state 53
    MUL         shift, and go to state 54
    NOT         shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57

    literalConst     go to state 59
    compIdentifier   go to state 60
    pIdentifier      go to state 61
    arrayIdentifier  go to state 62
    identifier       go to state 63
    expr             go to state 135
    addExpr          go to state 74
    mulExpr          go to state 75
    unaryExpr        go to state 76
    primaryExpr      go to state 77


State 102

   64 expr: compIdentifier DIVASSIGN • expr

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 52
    MINUS       shift, and go to state 53
    MUL         shift, and go to state 54
    NOT         shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57

    literalConst     go to state 59
    compIdentifier   go to state 60
    pIdentifier      go to state 61
    arrayIdentifier  go to state 62
    identifier       go to state 63
    expr             go to state 136
    addExpr          go to state 74
    mulExpr          go to state 75
    unaryExpr        go to state 76
    primaryExpr      go to state 77


State 103

   82 primaryExpr: pIdentifier LPAREN • funcRParams RPAREN
   83            | pIdentifier LPAREN • RPAREN

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    RPAREN      shift, and go to state 137
    PLUS        shift, and go to state 52
    MINUS       shift, and go to state 53
    MUL         shift, and go to state 54
    NOT         shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57

    literalConst     go to state 59
    compIdentifier   go to state 60
    pIdentifier      go to state 61
    arrayIdentifier  go to state 62
    identifier       go to state 63
    expr             go to state 138
    addExpr          go to state 74
    mulExpr          go to state 75
    unaryExpr        go to state 76
    primaryExpr      go to state 77
    funcRParams      go to state 139


State 104

   13 arrayIdentifier: pIdentifier LBRACKET • expr RBRACKET

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 52
    MINUS       shift, and go to state 53
    MUL         shift, and go to state 54
    NOT         shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57

    literalConst     go to state 59
    compIdentifier   go to state 60
    pIdentifier      go to state 61
    arrayIdentifier  go to state 62
    identifier       go to state 63
    expr             go to state 140
    addExpr          go to state 74
    mulExpr          go to state 75
    unaryExpr        go to state 76
    primaryExpr      go to state 77


State 105

   77 unaryExpr: pIdentifier INC •

    $default  reduce using rule 77 (unaryExpr)


State 106

   78 unaryExpr: pIdentifier DEC •

    $default  reduce using rule 78 (unaryExpr)


State 107

   14 arrayIdentifier: arrayIdentifier LBRACKET • expr RBRACKET

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 52
    MINUS       shift, and go to state 53
    MUL         shift, and go to state 54
    NOT         shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57

    literalConst     go to state 59
    compIdentifier   go to state 60
    pIdentifier      go to state 61
    arrayIdentifier  go to state 62
    identifier       go to state 63
    expr             go to state 141
    addExpr          go to state 74
    mulExpr          go to state 75
    unaryExpr        go to state 76
    primaryExpr      go to state 77


State 108

   35 block: blockLBRACE blockItems • blockRBRACE
   39 blockItems: blockItems • blockItem

    T_INT       shift, and go to state 1
    T_VOID      shift, and go to state 2
    ADDR        shift, and go to state 42
    SEMICOLON   shift, and go to state 43
    LPAREN      shift, and go to state 44
    LBRACE      shift, and go to state 45
    RBRACE      shift, and go to state 142
    IF_         shift, and go to state 46
    WHILE_      shift, and go to state 47
    FOR_        shift, and go to state 48
    BREAK       shift, and go to state 49
    CONTINUE    shift, and go to state 50
    RETURN      shift, and go to state 51
    PLUS        shift, and go to state 52
    MINUS       shift, and go to state 53
    MUL         shift, and go to state 54
    NOT         shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57

    basicType        go to state 58
    literalConst     go to state 59
    compIdentifier   go to state 60
    pIdentifier      go to state 61
    arrayIdentifier  go to state 62
    identifier       go to state 63
    decl             go to state 64
    varDecl          go to state 6
    block            go to state 65
    blockLBRACE      go to state 66
    blockRBRACE      go to state 143
    blockItem        go to state 110
    stmt             go to state 69
    IF               go to state 70
    WHILE            go to state 71
    FOR              go to state 72
    expr             go to state 73
    addExpr          go to state 74
    mulExpr          go to state 75
    unaryExpr        go to state 76
    primaryExpr      go to state 77


State 109

   30 funcDef: basicType pDeclIdentifier funcLPAREN RPAREN LBRACE blockItems RBRACE •

    $default  reduce using rule 30 (funcDef)


State 110

   39 blockItems: blockItems blockItem •

    $default  reduce using rule 39 (blockItems)


State 111

   47 stmt: IF LPAREN • cond RPAREN stmt_ ELSE stmt_
   48     | IF LPAREN • cond RPAREN stmt_

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 52
    MINUS       shift, and go to state 53
    MUL         shift, and go to state 54
    NOT         shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57

    literalConst     go to state 59
    compIdentifier   go to state 60
    pIdentifier      go to state 61
    arrayIdentifier  go to state 62
    identifier       go to state 63
    expr             go to state 96
    cond             go to state 144
    addExpr          go to state 74
    mulExpr          go to state 75
    unaryExpr        go to state 76
    primaryExpr      go to state 77
    LOrExpr          go to state 83
    LAndExpr         go to state 84
    eqExpr           go to state 85
    relExpr          go to state 86


State 112

   49 stmt: WHILE LPAREN • cond RPAREN stmt_

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 52
    MINUS       shift, and go to state 53
    MUL         shift, and go to state 54
    NOT         shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57

    literalConst     go to state 59
    compIdentifier   go to state 60
    pIdentifier      go to state 61
    arrayIdentifier  go to state 62
    identifier       go to state 63
    expr             go to state 96
    cond             go to state 145
    addExpr          go to state 74
    mulExpr          go to state 75
    unaryExpr        go to state 76
    primaryExpr      go to state 77
    LOrExpr          go to state 83
    LAndExpr         go to state 84
    eqExpr           go to state 85
    relExpr          go to state 86


State 113

   50 stmt: FOR LPAREN • basicType varDefs SEMICOLON cond SEMICOLON expr RPAREN stmt_
   51     | FOR LPAREN • expr SEMICOLON cond SEMICOLON expr RPAREN stmt_

    T_INT       shift, and go to state 1
    T_VOID      shift, and go to state 2
    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 52
    MINUS       shift, and go to state 53
    MUL         shift, and go to state 54
    NOT         shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57

    basicType        go to state 146
    literalConst     go to state 59
    compIdentifier   go to state 60
    pIdentifier      go to state 61
    arrayIdentifier  go to state 62
    identifier       go to state 63
    expr             go to state 147
    addExpr          go to state 74
    mulExpr          go to state 75
    unaryExpr        go to state 76
    primaryExpr      go to state 77


State 114

   45 stmt: expr SEMICOLON •

    $default  reduce using rule 45 (stmt)


State 115

   67 addExpr: addExpr PLUS • mulExpr

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 52
    MINUS       shift, and go to state 53
    MUL         shift, and go to state 54
    NOT         shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57

    literalConst     go to state 59
    compIdentifier   go to state 91
    pIdentifier      go to state 61
    arrayIdentifier  go to state 62
    identifier       go to state 63
    mulExpr          go to state 148
    unaryExpr        go to state 76
    primaryExpr      go to state 77


State 116

   68 addExpr: addExpr MINUS • mulExpr

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 52
    MINUS       shift, and go to state 53
    MUL         shift, and go to state 54
    NOT         shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57

    literalConst     go to state 59
    compIdentifier   go to state 91
    pIdentifier      go to state 61
    arrayIdentifier  go to state 62
    identifier       go to state 63
    mulExpr          go to state 149
    unaryExpr        go to state 76
    primaryExpr      go to state 77


State 117

   70 mulExpr: mulExpr MUL • unaryExpr

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 52
    MINUS       shift, and go to state 53
    MUL         shift, and go to state 54
    NOT         shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57

    literalConst     go to state 59
    compIdentifier   go to state 91
    pIdentifier      go to state 61
    arrayIdentifier  go to state 62
    identifier       go to state 63
    unaryExpr        go to state 150
    primaryExpr      go to state 77


State 118

   71 mulExpr: mulExpr DIV • unaryExpr

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 52
    MINUS       shift, and go to state 53
    MUL         shift, and go to state 54
    NOT         shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57

    literalConst     go to state 59
    compIdentifier   go to state 91
    pIdentifier      go to state 61
    arrayIdentifier  go to state 62
    identifier       go to state 63
    unaryExpr        go to state 151
    primaryExpr      go to state 77


State 119

   72 mulExpr: mulExpr MOD • unaryExpr

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 52
    MINUS       shift, and go to state 53
    MUL         shift, and go to state 54
    NOT         shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57

    literalConst     go to state 59
    compIdentifier   go to state 91
    pIdentifier      go to state 61
    arrayIdentifier  go to state 62
    identifier       go to state 63
    unaryExpr        go to state 152
    primaryExpr      go to state 77


State 120

   29 funcDef: basicType pDeclIdentifier funcLPAREN funcFParams RPAREN LBRACE blockItems • RBRACE
   39 blockItems: blockItems • blockItem

    T_INT       shift, and go to state 1
    T_VOID      shift, and go to state 2
    ADDR        shift, and go to state 42
    SEMICOLON   shift, and go to state 43
    LPAREN      shift, and go to state 44
    LBRACE      shift, and go to state 45
    RBRACE      shift, and go to state 153
    IF_         shift, and go to state 46
    WHILE_      shift, and go to state 47
    FOR_        shift, and go to state 48
    BREAK       shift, and go to state 49
    CONTINUE    shift, and go to state 50
    RETURN      shift, and go to state 51
    PLUS        shift, and go to state 52
    MINUS       shift, and go to state 53
    MUL         shift, and go to state 54
    NOT         shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57

    basicType        go to state 58
    literalConst     go to state 59
    compIdentifier   go to state 60
    pIdentifier      go to state 61
    arrayIdentifier  go to state 62
    identifier       go to state 63
    decl             go to state 64
    varDecl          go to state 6
    block            go to state 65
    blockLBRACE      go to state 66
    blockItem        go to state 110
    stmt             go to state 69
    IF               go to state 70
    WHILE            go to state 71
    FOR              go to state 72
    expr             go to state 73
    addExpr          go to state 74
    mulExpr          go to state 75
    unaryExpr        go to state 76
    primaryExpr      go to state 77


State 121

   80 primaryExpr: LPAREN expr RPAREN •

    $default  reduce using rule 80 (primaryExpr)


State 122

   81 primaryExpr: LPAREN cond RPAREN •

    $default  reduce using rule 81 (primaryExpr)


State 123

   88 LOrExpr: LAndExpr OR • LOrExpr

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 52
    MINUS       shift, and go to state 53
    MUL         shift, and go to state 54
    NOT         shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57

    literalConst     go to state 59
    compIdentifier   go to state 60
    pIdentifier      go to state 61
    arrayIdentifier  go to state 62
    identifier       go to state 63
    expr             go to state 96
    addExpr          go to state 74
    mulExpr          go to state 75
    unaryExpr        go to state 76
    primaryExpr      go to state 77
    LOrExpr          go to state 154
    LAndExpr         go to state 84
    eqExpr           go to state 85
    relExpr          go to state 86


State 124

   90 LAndExpr: eqExpr AND • LAndExpr

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 52
    MINUS       shift, and go to state 53
    MUL         shift, and go to state 54
    NOT         shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57

    literalConst     go to state 59
    compIdentifier   go to state 60
    pIdentifier      go to state 61
    arrayIdentifier  go to state 62
    identifier       go to state 63
    expr             go to state 96
    addExpr          go to state 74
    mulExpr          go to state 75
    unaryExpr        go to state 76
    primaryExpr      go to state 77
    LAndExpr         go to state 155
    eqExpr           go to state 85
    relExpr          go to state 86


State 125

   92 eqExpr: relExpr EQ • eqExpr

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 52
    MINUS       shift, and go to state 53
    MUL         shift, and go to state 54
    NOT         shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57

    literalConst     go to state 59
    compIdentifier   go to state 60
    pIdentifier      go to state 61
    arrayIdentifier  go to state 62
    identifier       go to state 63
    expr             go to state 96
    addExpr          go to state 74
    mulExpr          go to state 75
    unaryExpr        go to state 76
    primaryExpr      go to state 77
    eqExpr           go to state 156
    relExpr          go to state 86


State 126

   97 relExpr: relExpr GRAEQ • expr

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 52
    MINUS       shift, and go to state 53
    MUL         shift, and go to state 54
    NOT         shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57

    literalConst     go to state 59
    compIdentifier   go to state 60
    pIdentifier      go to state 61
    arrayIdentifier  go to state 62
    identifier       go to state 63
    expr             go to state 157
    addExpr          go to state 74
    mulExpr          go to state 75
    unaryExpr        go to state 76
    primaryExpr      go to state 77


State 127

   98 relExpr: relExpr LESEQ • expr

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 52
    MINUS       shift, and go to state 53
    MUL         shift, and go to state 54
    NOT         shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57

    literalConst     go to state 59
    compIdentifier   go to state 60
    pIdentifier      go to state 61
    arrayIdentifier  go to state 62
    identifier       go to state 63
    expr             go to state 158
    addExpr          go to state 74
    mulExpr          go to state 75
    unaryExpr        go to state 76
    primaryExpr      go to state 77


State 128

   93 eqExpr: relExpr NEQ • eqExpr

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 52
    MINUS       shift, and go to state 53
    MUL         shift, and go to state 54
    NOT         shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57

    literalConst     go to state 59
    compIdentifier   go to state 60
    pIdentifier      go to state 61
    arrayIdentifier  go to state 62
    identifier       go to state 63
    expr             go to state 96
    addExpr          go to state 74
    mulExpr          go to state 75
    unaryExpr        go to state 76
    primaryExpr      go to state 77
    eqExpr           go to state 159
    relExpr          go to state 86


State 129

   95 relExpr: relExpr GRA • expr

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 52
    MINUS       shift, and go to state 53
    MUL         shift, and go to state 54
    NOT         shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57

    literalConst     go to state 59
    compIdentifier   go to state 60
    pIdentifier      go to state 61
    arrayIdentifier  go to state 62
    identifier       go to state 63
    expr             go to state 160
    addExpr          go to state 74
    mulExpr          go to state 75
    unaryExpr        go to state 76
    primaryExpr      go to state 77


State 130

   96 relExpr: relExpr LES • expr

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 52
    MINUS       shift, and go to state 53
    MUL         shift, and go to state 54
    NOT         shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57

    literalConst     go to state 59
    compIdentifier   go to state 60
    pIdentifier      go to state 61
    arrayIdentifier  go to state 62
    identifier       go to state 63
    expr             go to state 161
    addExpr          go to state 74
    mulExpr          go to state 75
    unaryExpr        go to state 76
    primaryExpr      go to state 77


State 131

   55 stmt: RETURN expr SEMICOLON •

    $default  reduce using rule 55 (stmt)


State 132

   60 expr: compIdentifier ASSIGN expr •

    $default  reduce using rule 60 (expr)


State 133

   61 expr: compIdentifier PLUSASSIGN expr •

    $default  reduce using rule 61 (expr)


State 134

   62 expr: compIdentifier MINUSASSIGN expr •

    $default  reduce using rule 62 (expr)


State 135

   63 expr: compIdentifier MULASSIGN expr •

    $default  reduce using rule 63 (expr)


State 136

   64 expr: compIdentifier DIVASSIGN expr •

    $default  reduce using rule 64 (expr)


State 137

   83 primaryExpr: pIdentifier LPAREN RPAREN •

    $default  reduce using rule 83 (primaryExpr)


State 138

   85 funcRParams: expr •

    $default  reduce using rule 85 (funcRParams)


State 139

   82 primaryExpr: pIdentifier LPAREN funcRParams • RPAREN
   86 funcRParams: funcRParams • COMMA expr

    COMMA   shift, and go to state 162
    RPAREN  shift, and go to state 163


State 140

   13 arrayIdentifier: pIdentifier LBRACKET expr • RBRACKET

    RBRACKET  shift, and go to state 164


State 141

   14 arrayIdentifier: arrayIdentifier LBRACKET expr • RBRACKET

    RBRACKET  shift, and go to state 165


State 142

   37 blockRBRACE: RBRACE •

    $default  reduce using rule 37 (blockRBRACE)


State 143

   35 block: blockLBRACE blockItems blockRBRACE •

    $default  reduce using rule 35 (block)


State 144

   47 stmt: IF LPAREN cond • RPAREN stmt_ ELSE stmt_
   48     | IF LPAREN cond • RPAREN stmt_

    RPAREN  shift, and go to state 166


State 145

   49 stmt: WHILE LPAREN cond • RPAREN stmt_

    RPAREN  shift, and go to state 167


State 146

   50 stmt: FOR LPAREN basicType • varDefs SEMICOLON cond SEMICOLON expr RPAREN stmt_

    ADDR        shift, and go to state 11
    MUL         shift, and go to state 12
    IDENTIFIER  shift, and go to state 13

    declCompIdentifier   go to state 14
    pDeclIdentifier      go to state 34
    arrayDeclIdentifier  go to state 16
    declIdentifier       go to state 17
    varDefs              go to state 168
    varDef               go to state 19


State 147

   51 stmt: FOR LPAREN expr • SEMICOLON cond SEMICOLON expr RPAREN stmt_

    SEMICOLON  shift, and go to state 169


State 148

   67 addExpr: addExpr PLUS mulExpr •
   70 mulExpr: mulExpr • MUL unaryExpr
   71        | mulExpr • DIV unaryExpr
   72        | mulExpr • MOD unaryExpr

    MUL  shift, and go to state 117
    DIV  shift, and go to state 118
    MOD  shift, and go to state 119

    MUL       [reduce using rule 67 (addExpr)]
    DIV       [reduce using rule 67 (addExpr)]
    MOD       [reduce using rule 67 (addExpr)]
    $default  reduce using rule 67 (addExpr)


State 149

   68 addExpr: addExpr MINUS mulExpr •
   70 mulExpr: mulExpr • MUL unaryExpr
   71        | mulExpr • DIV unaryExpr
   72        | mulExpr • MOD unaryExpr

    MUL  shift, and go to state 117
    DIV  shift, and go to state 118
    MOD  shift, and go to state 119

    MUL       [reduce using rule 68 (addExpr)]
    DIV       [reduce using rule 68 (addExpr)]
    MOD       [reduce using rule 68 (addExpr)]
    $default  reduce using rule 68 (addExpr)


State 150

   70 mulExpr: mulExpr MUL unaryExpr •

    $default  reduce using rule 70 (mulExpr)


State 151

   71 mulExpr: mulExpr DIV unaryExpr •

    $default  reduce using rule 71 (mulExpr)


State 152

   72 mulExpr: mulExpr MOD unaryExpr •

    $default  reduce using rule 72 (mulExpr)


State 153

   29 funcDef: basicType pDeclIdentifier funcLPAREN funcFParams RPAREN LBRACE blockItems RBRACE •

    $default  reduce using rule 29 (funcDef)


State 154

   88 LOrExpr: LAndExpr OR LOrExpr •

    $default  reduce using rule 88 (LOrExpr)


State 155

   90 LAndExpr: eqExpr AND LAndExpr •

    $default  reduce using rule 90 (LAndExpr)


State 156

   92 eqExpr: relExpr EQ eqExpr •

    $default  reduce using rule 92 (eqExpr)


State 157

   97 relExpr: relExpr GRAEQ expr •

    $default  reduce using rule 97 (relExpr)


State 158

   98 relExpr: relExpr LESEQ expr •

    $default  reduce using rule 98 (relExpr)


State 159

   93 eqExpr: relExpr NEQ eqExpr •

    $default  reduce using rule 93 (eqExpr)


State 160

   95 relExpr: relExpr GRA expr •

    $default  reduce using rule 95 (relExpr)


State 161

   96 relExpr: relExpr LES expr •

    $default  reduce using rule 96 (relExpr)


State 162

   86 funcRParams: funcRParams COMMA • expr

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 52
    MINUS       shift, and go to state 53
    MUL         shift, and go to state 54
    NOT         shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57

    literalConst     go to state 59
    compIdentifier   go to state 60
    pIdentifier      go to state 61
    arrayIdentifier  go to state 62
    identifier       go to state 63
    expr             go to state 170
    addExpr          go to state 74
    mulExpr          go to state 75
    unaryExpr        go to state 76
    primaryExpr      go to state 77


State 163

   82 primaryExpr: pIdentifier LPAREN funcRParams RPAREN •

    $default  reduce using rule 82 (primaryExpr)


State 164

   13 arrayIdentifier: pIdentifier LBRACKET expr RBRACKET •

    $default  reduce using rule 13 (arrayIdentifier)


State 165

   14 arrayIdentifier: arrayIdentifier LBRACKET expr RBRACKET •

    $default  reduce using rule 14 (arrayIdentifier)


State 166

   47 stmt: IF LPAREN cond RPAREN • stmt_ ELSE stmt_
   48     | IF LPAREN cond RPAREN • stmt_

    ADDR        shift, and go to state 42
    SEMICOLON   shift, and go to state 43
    LPAREN      shift, and go to state 44
    LBRACE      shift, and go to state 171
    IF_         shift, and go to state 46
    WHILE_      shift, and go to state 47
    FOR_        shift, and go to state 48
    BREAK       shift, and go to state 49
    CONTINUE    shift, and go to state 50
    RETURN      shift, and go to state 51
    PLUS        shift, and go to state 52
    MINUS       shift, and go to state 53
    MUL         shift, and go to state 54
    NOT         shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57

    literalConst     go to state 59
    compIdentifier   go to state 60
    pIdentifier      go to state 61
    arrayIdentifier  go to state 62
    identifier       go to state 63
    block            go to state 65
    blockLBRACE      go to state 66
    stmt_            go to state 172
    stmt             go to state 173
    IF               go to state 70
    WHILE            go to state 71
    FOR              go to state 72
    expr             go to state 73
    addExpr          go to state 74
    mulExpr          go to state 75
    unaryExpr        go to state 76
    primaryExpr      go to state 77


State 167

   49 stmt: WHILE LPAREN cond RPAREN • stmt_

    ADDR        shift, and go to state 42
    SEMICOLON   shift, and go to state 43
    LPAREN      shift, and go to state 44
    LBRACE      shift, and go to state 171
    IF_         shift, and go to state 46
    WHILE_      shift, and go to state 47
    FOR_        shift, and go to state 48
    BREAK       shift, and go to state 49
    CONTINUE    shift, and go to state 50
    RETURN      shift, and go to state 51
    PLUS        shift, and go to state 52
    MINUS       shift, and go to state 53
    MUL         shift, and go to state 54
    NOT         shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57

    literalConst     go to state 59
    compIdentifier   go to state 60
    pIdentifier      go to state 61
    arrayIdentifier  go to state 62
    identifier       go to state 63
    block            go to state 65
    blockLBRACE      go to state 66
    stmt_            go to state 174
    stmt             go to state 173
    IF               go to state 70
    WHILE            go to state 71
    FOR              go to state 72
    expr             go to state 73
    addExpr          go to state 74
    mulExpr          go to state 75
    unaryExpr        go to state 76
    primaryExpr      go to state 77


State 168

   27 varDefs: varDefs • COMMA varDef
   50 stmt: FOR LPAREN basicType varDefs • SEMICOLON cond SEMICOLON expr RPAREN stmt_

    SEMICOLON  shift, and go to state 175
    COMMA      shift, and go to state 27


State 169

   51 stmt: FOR LPAREN expr SEMICOLON • cond SEMICOLON expr RPAREN stmt_

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 52
    MINUS       shift, and go to state 53
    MUL         shift, and go to state 54
    NOT         shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57

    literalConst     go to state 59
    compIdentifier   go to state 60
    pIdentifier      go to state 61
    arrayIdentifier  go to state 62
    identifier       go to state 63
    expr             go to state 96
    cond             go to state 176
    addExpr          go to state 74
    mulExpr          go to state 75
    unaryExpr        go to state 76
    primaryExpr      go to state 77
    LOrExpr          go to state 83
    LAndExpr         go to state 84
    eqExpr           go to state 85
    relExpr          go to state 86


State 170

   86 funcRParams: funcRParams COMMA expr •

    $default  reduce using rule 86 (funcRParams)


State 171

   36 blockLBRACE: LBRACE •
   42 stmt_: LBRACE • blockItems RBRACE

    T_INT       shift, and go to state 1
    T_VOID      shift, and go to state 2
    ADDR        shift, and go to state 42
    SEMICOLON   shift, and go to state 43
    LPAREN      shift, and go to state 44
    LBRACE      shift, and go to state 45
    IF_         shift, and go to state 46
    WHILE_      shift, and go to state 47
    FOR_        shift, and go to state 48
    BREAK       shift, and go to state 49
    CONTINUE    shift, and go to state 50
    RETURN      shift, and go to state 51
    PLUS        shift, and go to state 52
    MINUS       shift, and go to state 53
    MUL         shift, and go to state 54
    NOT         shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57

    T_INT       [reduce using rule 36 (blockLBRACE)]
    T_VOID      [reduce using rule 36 (blockLBRACE)]
    ADDR        [reduce using rule 36 (blockLBRACE)]
    SEMICOLON   [reduce using rule 36 (blockLBRACE)]
    LPAREN      [reduce using rule 36 (blockLBRACE)]
    LBRACE      [reduce using rule 36 (blockLBRACE)]
    IF_         [reduce using rule 36 (blockLBRACE)]
    WHILE_      [reduce using rule 36 (blockLBRACE)]
    FOR_        [reduce using rule 36 (blockLBRACE)]
    BREAK       [reduce using rule 36 (blockLBRACE)]
    CONTINUE    [reduce using rule 36 (blockLBRACE)]
    RETURN      [reduce using rule 36 (blockLBRACE)]
    PLUS        [reduce using rule 36 (blockLBRACE)]
    MINUS       [reduce using rule 36 (blockLBRACE)]
    MUL         [reduce using rule 36 (blockLBRACE)]
    NOT         [reduce using rule 36 (blockLBRACE)]
    IDENTIFIER  [reduce using rule 36 (blockLBRACE)]
    INTEGER     [reduce using rule 36 (blockLBRACE)]

    basicType        go to state 58
    literalConst     go to state 59
    compIdentifier   go to state 60
    pIdentifier      go to state 61
    arrayIdentifier  go to state 62
    identifier       go to state 63
    decl             go to state 64
    varDecl          go to state 6
    block            go to state 65
    blockLBRACE      go to state 66
    blockItems       go to state 177
    blockItem        go to state 68
    stmt             go to state 69
    IF               go to state 70
    WHILE            go to state 71
    FOR              go to state 72
    expr             go to state 73
    addExpr          go to state 74
    mulExpr          go to state 75
    unaryExpr        go to state 76
    primaryExpr      go to state 77


State 172

   47 stmt: IF LPAREN cond RPAREN stmt_ • ELSE stmt_
   48     | IF LPAREN cond RPAREN stmt_ •

    ELSE  shift, and go to state 178

    ELSE      [reduce using rule 48 (stmt)]
    $default  reduce using rule 48 (stmt)


State 173

   43 stmt_: stmt •

    $default  reduce using rule 43 (stmt_)


State 174

   49 stmt: WHILE LPAREN cond RPAREN stmt_ •

    $default  reduce using rule 49 (stmt)


State 175

   50 stmt: FOR LPAREN basicType varDefs SEMICOLON • cond SEMICOLON expr RPAREN stmt_

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 52
    MINUS       shift, and go to state 53
    MUL         shift, and go to state 54
    NOT         shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57

    literalConst     go to state 59
    compIdentifier   go to state 60
    pIdentifier      go to state 61
    arrayIdentifier  go to state 62
    identifier       go to state 63
    expr             go to state 96
    cond             go to state 179
    addExpr          go to state 74
    mulExpr          go to state 75
    unaryExpr        go to state 76
    primaryExpr      go to state 77
    LOrExpr          go to state 83
    LAndExpr         go to state 84
    eqExpr           go to state 85
    relExpr          go to state 86


State 176

   51 stmt: FOR LPAREN expr SEMICOLON cond • SEMICOLON expr RPAREN stmt_

    SEMICOLON  shift, and go to state 180


State 177

   39 blockItems: blockItems • blockItem
   42 stmt_: LBRACE blockItems • RBRACE

    T_INT       shift, and go to state 1
    T_VOID      shift, and go to state 2
    ADDR        shift, and go to state 42
    SEMICOLON   shift, and go to state 43
    LPAREN      shift, and go to state 44
    LBRACE      shift, and go to state 45
    RBRACE      shift, and go to state 181
    IF_         shift, and go to state 46
    WHILE_      shift, and go to state 47
    FOR_        shift, and go to state 48
    BREAK       shift, and go to state 49
    CONTINUE    shift, and go to state 50
    RETURN      shift, and go to state 51
    PLUS        shift, and go to state 52
    MINUS       shift, and go to state 53
    MUL         shift, and go to state 54
    NOT         shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57

    basicType        go to state 58
    literalConst     go to state 59
    compIdentifier   go to state 60
    pIdentifier      go to state 61
    arrayIdentifier  go to state 62
    identifier       go to state 63
    decl             go to state 64
    varDecl          go to state 6
    block            go to state 65
    blockLBRACE      go to state 66
    blockItem        go to state 110
    stmt             go to state 69
    IF               go to state 70
    WHILE            go to state 71
    FOR              go to state 72
    expr             go to state 73
    addExpr          go to state 74
    mulExpr          go to state 75
    unaryExpr        go to state 76
    primaryExpr      go to state 77


State 178

   47 stmt: IF LPAREN cond RPAREN stmt_ ELSE • stmt_

    ADDR        shift, and go to state 42
    SEMICOLON   shift, and go to state 43
    LPAREN      shift, and go to state 44
    LBRACE      shift, and go to state 171
    IF_         shift, and go to state 46
    WHILE_      shift, and go to state 47
    FOR_        shift, and go to state 48
    BREAK       shift, and go to state 49
    CONTINUE    shift, and go to state 50
    RETURN      shift, and go to state 51
    PLUS        shift, and go to state 52
    MINUS       shift, and go to state 53
    MUL         shift, and go to state 54
    NOT         shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57

    literalConst     go to state 59
    compIdentifier   go to state 60
    pIdentifier      go to state 61
    arrayIdentifier  go to state 62
    identifier       go to state 63
    block            go to state 65
    blockLBRACE      go to state 66
    stmt_            go to state 182
    stmt             go to state 173
    IF               go to state 70
    WHILE            go to state 71
    FOR              go to state 72
    expr             go to state 73
    addExpr          go to state 74
    mulExpr          go to state 75
    unaryExpr        go to state 76
    primaryExpr      go to state 77


State 179

   50 stmt: FOR LPAREN basicType varDefs SEMICOLON cond • SEMICOLON expr RPAREN stmt_

    SEMICOLON  shift, and go to state 183


State 180

   51 stmt: FOR LPAREN expr SEMICOLON cond SEMICOLON • expr RPAREN stmt_

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 52
    MINUS       shift, and go to state 53
    MUL         shift, and go to state 54
    NOT         shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57

    literalConst     go to state 59
    compIdentifier   go to state 60
    pIdentifier      go to state 61
    arrayIdentifier  go to state 62
    identifier       go to state 63
    expr             go to state 184
    addExpr          go to state 74
    mulExpr          go to state 75
    unaryExpr        go to state 76
    primaryExpr      go to state 77


State 181

   42 stmt_: LBRACE blockItems RBRACE •

    $default  reduce using rule 42 (stmt_)


State 182

   47 stmt: IF LPAREN cond RPAREN stmt_ ELSE stmt_ •

    $default  reduce using rule 47 (stmt)


State 183

   50 stmt: FOR LPAREN basicType varDefs SEMICOLON cond SEMICOLON • expr RPAREN stmt_

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 52
    MINUS       shift, and go to state 53
    MUL         shift, and go to state 54
    NOT         shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57

    literalConst     go to state 59
    compIdentifier   go to state 60
    pIdentifier      go to state 61
    arrayIdentifier  go to state 62
    identifier       go to state 63
    expr             go to state 185
    addExpr          go to state 74
    mulExpr          go to state 75
    unaryExpr        go to state 76
    primaryExpr      go to state 77


State 184

   51 stmt: FOR LPAREN expr SEMICOLON cond SEMICOLON expr • RPAREN stmt_

    RPAREN  shift, and go to state 186


State 185

   50 stmt: FOR LPAREN basicType varDefs SEMICOLON cond SEMICOLON expr • RPAREN stmt_

    RPAREN  shift, and go to state 187


State 186

   51 stmt: FOR LPAREN expr SEMICOLON cond SEMICOLON expr RPAREN • stmt_

    ADDR        shift, and go to state 42
    SEMICOLON   shift, and go to state 43
    LPAREN      shift, and go to state 44
    LBRACE      shift, and go to state 171
    IF_         shift, and go to state 46
    WHILE_      shift, and go to state 47
    FOR_        shift, and go to state 48
    BREAK       shift, and go to state 49
    CONTINUE    shift, and go to state 50
    RETURN      shift, and go to state 51
    PLUS        shift, and go to state 52
    MINUS       shift, and go to state 53
    MUL         shift, and go to state 54
    NOT         shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57

    literalConst     go to state 59
    compIdentifier   go to state 60
    pIdentifier      go to state 61
    arrayIdentifier  go to state 62
    identifier       go to state 63
    block            go to state 65
    blockLBRACE      go to state 66
    stmt_            go to state 188
    stmt             go to state 173
    IF               go to state 70
    WHILE            go to state 71
    FOR              go to state 72
    expr             go to state 73
    addExpr          go to state 74
    mulExpr          go to state 75
    unaryExpr        go to state 76
    primaryExpr      go to state 77


State 187

   50 stmt: FOR LPAREN basicType varDefs SEMICOLON cond SEMICOLON expr RPAREN • stmt_

    ADDR        shift, and go to state 42
    SEMICOLON   shift, and go to state 43
    LPAREN      shift, and go to state 44
    LBRACE      shift, and go to state 171
    IF_         shift, and go to state 46
    WHILE_      shift, and go to state 47
    FOR_        shift, and go to state 48
    BREAK       shift, and go to state 49
    CONTINUE    shift, and go to state 50
    RETURN      shift, and go to state 51
    PLUS        shift, and go to state 52
    MINUS       shift, and go to state 53
    MUL         shift, and go to state 54
    NOT         shift, and go to state 55
    IDENTIFIER  shift, and go to state 56
    INTEGER     shift, and go to state 57

    literalConst     go to state 59
    compIdentifier   go to state 60
    pIdentifier      go to state 61
    arrayIdentifier  go to state 62
    identifier       go to state 63
    block            go to state 65
    blockLBRACE      go to state 66
    stmt_            go to state 189
    stmt             go to state 173
    IF               go to state 70
    WHILE            go to state 71
    FOR              go to state 72
    expr             go to state 73
    addExpr          go to state 74
    mulExpr          go to state 75
    unaryExpr        go to state 76
    primaryExpr      go to state 77


State 188

   51 stmt: FOR LPAREN expr SEMICOLON cond SEMICOLON expr RPAREN stmt_ •

    $default  reduce using rule 51 (stmt)


State 189

   50 stmt: FOR LPAREN basicType varDefs SEMICOLON cond SEMICOLON expr RPAREN stmt_ •

    $default  reduce using rule 50 (stmt)
