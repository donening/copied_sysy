Terminals unused in grammar

    T_CHAR
    CONST


State 72 conflicts: 2 shift/reduce
State 73 conflicts: 3 shift/reduce
State 79 conflicts: 1 shift/reduce
State 82 conflicts: 1 shift/reduce
State 83 conflicts: 1 shift/reduce
State 84 conflicts: 6 shift/reduce
State 143 conflicts: 3 shift/reduce
State 144 conflicts: 3 shift/reduce
State 164 conflicts: 17 shift/reduce
State 165 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: decl
    2        | funcDef
    3        | program decl
    4        | program funcDef

    5 basicType: T_INT
    6          | T_VOID

    7 literalConst: INTEGER

    8 compIdentifier: pIdentifier
    9               | arrayIdentifier

   10 pIdentifier: identifier
   11            | MUL pIdentifier
   12            | ADDR pIdentifier

   13 arrayIdentifier: pIdentifier LBRACKET expr RBRACKET
   14                | arrayIdentifier LBRACKET expr RBRACKET

   15 identifier: IDENTIFIER

   16 declCompIdentifier: pDeclIdentifier
   17                   | arrayDeclIdentifier

   18 pDeclIdentifier: declIdentifier
   19                | MUL pDeclIdentifier
   20                | ADDR pDeclIdentifier

   21 arrayDeclIdentifier: pDeclIdentifier LBRACKET INTEGER RBRACKET
   22                    | arrayDeclIdentifier LBRACKET INTEGER RBRACKET

   23 declIdentifier: IDENTIFIER

   24 decl: varDecl

   25 varDecl: basicType varDefs SEMICOLON

   26 varDefs: varDef
   27        | varDefs COMMA varDef

   28 varDef: declCompIdentifier

   29 funcDef: basicType pDeclIdentifier funcLPAREN funcFParams RPAREN LBRACE blockItems RBRACE
   30        | basicType pDeclIdentifier funcLPAREN RPAREN LBRACE blockItems RBRACE

   31 funcLPAREN: LPAREN

   32 funcFParams: funcFParam
   33            | funcFParams COMMA funcFParam

   34 funcFParam: basicType pDeclIdentifier

   35 block: blockLBRACE blockItems blockRBRACE

   36 blockLBRACE: LBRACE

   37 blockRBRACE: RBRACE

   38 blockItems: blockItem
   39           | blockItems blockItem

   40 blockItem: decl
   41          | stmt

   42 stmt_: LBRACE blockItems RBRACE
   43      | stmt

   44 stmt: SEMICOLON
   45     | expr SEMICOLON
   46     | block
   47     | IF LPAREN cond RPAREN stmt_ ELSE stmt_
   48     | IF LPAREN cond RPAREN stmt_
   49     | WHILE LPAREN cond RPAREN stmt_
   50     | BREAK SEMICOLON
   51     | CONTINUE SEMICOLON
   52     | RETURN SEMICOLON
   53     | RETURN expr SEMICOLON

   54 IF: IF_

   55 WHILE: WHILE_

   56 expr: addExpr
   57     | compIdentifier ASSIGN expr
   58     | compIdentifier PLUSASSIGN expr
   59     | compIdentifier MINUSASSIGN expr
   60     | compIdentifier MULASSIGN expr
   61     | compIdentifier DIVASSIGN expr

   62 cond: LOrExpr

   63 addExpr: mulExpr
   64        | addExpr PLUS mulExpr
   65        | addExpr MINUS mulExpr

   66 mulExpr: unaryExpr
   67        | mulExpr MUL unaryExpr
   68        | mulExpr DIV unaryExpr
   69        | mulExpr MOD unaryExpr

   70 unaryExpr: primaryExpr
   71          | NOT cond
   72          | PLUS primaryExpr
   73          | MINUS primaryExpr
   74          | pIdentifier INC
   75          | pIdentifier DEC

   76 primaryExpr: literalConst
   77            | LPAREN expr RPAREN
   78            | LPAREN cond RPAREN
   79            | pIdentifier LPAREN funcRParams RPAREN
   80            | pIdentifier LPAREN RPAREN
   81            | compIdentifier

   82 funcRParams: expr
   83            | funcRParams COMMA expr

   84 LOrExpr: LAndExpr
   85        | LAndExpr OR LOrExpr

   86 LAndExpr: eqExpr
   87         | eqExpr AND LAndExpr

   88 eqExpr: relExpr
   89       | relExpr EQ eqExpr
   90       | relExpr NEQ eqExpr

   91 relExpr: expr
   92        | relExpr GRA expr
   93        | relExpr LES expr
   94        | relExpr GRAEQ expr
   95        | relExpr LESEQ expr


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    T_CHAR (258)
    T_INT (259) 5
    T_VOID (260) 6
    ADDR (261) 12 20
    ASSIGN (262) 57
    PLUSASSIGN (263) 58
    MINUSASSIGN (264) 59
    MULASSIGN (265) 60
    DIVASSIGN (266) 61
    SEMICOLON (267) 25 44 45 50 51 52 53
    COMMA (268) 27 33 83
    LPAREN (269) 31 47 48 49 77 78 79 80
    RPAREN (270) 29 30 47 48 49 77 78 79 80
    LBRACE (271) 29 30 36 42
    RBRACE (272) 29 30 37 42
    LBRACKET (273) 13 14 21 22
    RBRACKET (274) 13 14 21 22
    CONST (275)
    IF_ (276) 54
    ELSE (277) 47
    WHILE_ (278) 55
    BREAK (279) 50
    CONTINUE (280) 51
    RETURN (281) 52 53
    EQ (282) 89
    GRAEQ (283) 94
    LESEQ (284) 95
    NEQ (285) 90
    GRA (286) 92
    LES (287) 93
    PLUS (288) 64 72
    MINUS (289) 65 73
    MUL (290) 11 19 67
    DIV (291) 68
    MOD (292) 69
    AND (293) 87
    OR (294) 85
    NOT (295) 71
    INC (296) 74
    DEC (297) 75
    IDENTIFIER (298) 15 23
    INTEGER (299) 7 21 22


Nonterminals, with rules where they appear

    $accept (45)
        on left: 0
    program (46)
        on left: 1 2 3 4
        on right: 0 3 4
    basicType (47)
        on left: 5 6
        on right: 25 29 30 34
    literalConst (48)
        on left: 7
        on right: 76
    compIdentifier (49)
        on left: 8 9
        on right: 57 58 59 60 61 81
    pIdentifier (50)
        on left: 10 11 12
        on right: 8 11 12 13 74 75 79 80
    arrayIdentifier (51)
        on left: 13 14
        on right: 9 14
    identifier (52)
        on left: 15
        on right: 10
    declCompIdentifier (53)
        on left: 16 17
        on right: 28
    pDeclIdentifier (54)
        on left: 18 19 20
        on right: 16 19 20 21 29 30 34
    arrayDeclIdentifier (55)
        on left: 21 22
        on right: 17 22
    declIdentifier (56)
        on left: 23
        on right: 18
    decl (57)
        on left: 24
        on right: 1 3 40
    varDecl (58)
        on left: 25
        on right: 24
    varDefs (59)
        on left: 26 27
        on right: 25 27
    varDef (60)
        on left: 28
        on right: 26 27
    funcDef (61)
        on left: 29 30
        on right: 2 4
    funcLPAREN (62)
        on left: 31
        on right: 29 30
    funcFParams (63)
        on left: 32 33
        on right: 29 33
    funcFParam (64)
        on left: 34
        on right: 32 33
    block (65)
        on left: 35
        on right: 46
    blockLBRACE (66)
        on left: 36
        on right: 35
    blockRBRACE (67)
        on left: 37
        on right: 35
    blockItems (68)
        on left: 38 39
        on right: 29 30 35 39 42
    blockItem (69)
        on left: 40 41
        on right: 38 39
    stmt_ (70)
        on left: 42 43
        on right: 47 48 49
    stmt (71)
        on left: 44 45 46 47 48 49 50 51 52 53
        on right: 41 43
    IF (72)
        on left: 54
        on right: 47 48
    WHILE (73)
        on left: 55
        on right: 49
    expr (74)
        on left: 56 57 58 59 60 61
        on right: 13 14 45 53 57 58 59 60 61 77 82 83 91 92 93 94 95
    cond (75)
        on left: 62
        on right: 47 48 49 71 78
    addExpr (76)
        on left: 63 64 65
        on right: 56 64 65
    mulExpr (77)
        on left: 66 67 68 69
        on right: 63 64 65 67 68 69
    unaryExpr (78)
        on left: 70 71 72 73 74 75
        on right: 66 67 68 69
    primaryExpr (79)
        on left: 76 77 78 79 80 81
        on right: 70 72 73
    funcRParams (80)
        on left: 82 83
        on right: 79 83
    LOrExpr (81)
        on left: 84 85
        on right: 62 85
    LAndExpr (82)
        on left: 86 87
        on right: 84 85 87
    eqExpr (83)
        on left: 88 89 90
        on right: 86 87 89 90
    relExpr (84)
        on left: 91 92 93 94 95
        on right: 88 89 90 92 93 94 95


State 0

    0 $accept: • program $end

    T_INT   shift, and go to state 1
    T_VOID  shift, and go to state 2

    program    go to state 3
    basicType  go to state 4
    decl       go to state 5
    varDecl    go to state 6
    funcDef    go to state 7


State 1

    5 basicType: T_INT •

    $default  reduce using rule 5 (basicType)


State 2

    6 basicType: T_VOID •

    $default  reduce using rule 6 (basicType)


State 3

    0 $accept: program • $end
    3 program: program • decl
    4        | program • funcDef

    $end    shift, and go to state 8
    T_INT   shift, and go to state 1
    T_VOID  shift, and go to state 2

    basicType  go to state 4
    decl       go to state 9
    varDecl    go to state 6
    funcDef    go to state 10


State 4

   25 varDecl: basicType • varDefs SEMICOLON
   29 funcDef: basicType • pDeclIdentifier funcLPAREN funcFParams RPAREN LBRACE blockItems RBRACE
   30        | basicType • pDeclIdentifier funcLPAREN RPAREN LBRACE blockItems RBRACE

    ADDR        shift, and go to state 11
    MUL         shift, and go to state 12
    IDENTIFIER  shift, and go to state 13

    declCompIdentifier   go to state 14
    pDeclIdentifier      go to state 15
    arrayDeclIdentifier  go to state 16
    declIdentifier       go to state 17
    varDefs              go to state 18
    varDef               go to state 19


State 5

    1 program: decl •

    $default  reduce using rule 1 (program)


State 6

   24 decl: varDecl •

    $default  reduce using rule 24 (decl)


State 7

    2 program: funcDef •

    $default  reduce using rule 2 (program)


State 8

    0 $accept: program $end •

    $default  accept


State 9

    3 program: program decl •

    $default  reduce using rule 3 (program)


State 10

    4 program: program funcDef •

    $default  reduce using rule 4 (program)


State 11

   20 pDeclIdentifier: ADDR • pDeclIdentifier

    ADDR        shift, and go to state 11
    MUL         shift, and go to state 12
    IDENTIFIER  shift, and go to state 13

    pDeclIdentifier  go to state 20
    declIdentifier   go to state 17


State 12

   19 pDeclIdentifier: MUL • pDeclIdentifier

    ADDR        shift, and go to state 11
    MUL         shift, and go to state 12
    IDENTIFIER  shift, and go to state 13

    pDeclIdentifier  go to state 21
    declIdentifier   go to state 17


State 13

   23 declIdentifier: IDENTIFIER •

    $default  reduce using rule 23 (declIdentifier)


State 14

   28 varDef: declCompIdentifier •

    $default  reduce using rule 28 (varDef)


State 15

   16 declCompIdentifier: pDeclIdentifier •
   21 arrayDeclIdentifier: pDeclIdentifier • LBRACKET INTEGER RBRACKET
   29 funcDef: basicType pDeclIdentifier • funcLPAREN funcFParams RPAREN LBRACE blockItems RBRACE
   30        | basicType pDeclIdentifier • funcLPAREN RPAREN LBRACE blockItems RBRACE

    LPAREN    shift, and go to state 22
    LBRACKET  shift, and go to state 23

    $default  reduce using rule 16 (declCompIdentifier)

    funcLPAREN  go to state 24


State 16

   17 declCompIdentifier: arrayDeclIdentifier •
   22 arrayDeclIdentifier: arrayDeclIdentifier • LBRACKET INTEGER RBRACKET

    LBRACKET  shift, and go to state 25

    $default  reduce using rule 17 (declCompIdentifier)


State 17

   18 pDeclIdentifier: declIdentifier •

    $default  reduce using rule 18 (pDeclIdentifier)


State 18

   25 varDecl: basicType varDefs • SEMICOLON
   27 varDefs: varDefs • COMMA varDef

    SEMICOLON  shift, and go to state 26
    COMMA      shift, and go to state 27


State 19

   26 varDefs: varDef •

    $default  reduce using rule 26 (varDefs)


State 20

   20 pDeclIdentifier: ADDR pDeclIdentifier •

    $default  reduce using rule 20 (pDeclIdentifier)


State 21

   19 pDeclIdentifier: MUL pDeclIdentifier •

    $default  reduce using rule 19 (pDeclIdentifier)


State 22

   31 funcLPAREN: LPAREN •

    $default  reduce using rule 31 (funcLPAREN)


State 23

   21 arrayDeclIdentifier: pDeclIdentifier LBRACKET • INTEGER RBRACKET

    INTEGER  shift, and go to state 28


State 24

   29 funcDef: basicType pDeclIdentifier funcLPAREN • funcFParams RPAREN LBRACE blockItems RBRACE
   30        | basicType pDeclIdentifier funcLPAREN • RPAREN LBRACE blockItems RBRACE

    T_INT   shift, and go to state 1
    T_VOID  shift, and go to state 2
    RPAREN  shift, and go to state 29

    basicType    go to state 30
    funcFParams  go to state 31
    funcFParam   go to state 32


State 25

   22 arrayDeclIdentifier: arrayDeclIdentifier LBRACKET • INTEGER RBRACKET

    INTEGER  shift, and go to state 33


State 26

   25 varDecl: basicType varDefs SEMICOLON •

    $default  reduce using rule 25 (varDecl)


State 27

   27 varDefs: varDefs COMMA • varDef

    ADDR        shift, and go to state 11
    MUL         shift, and go to state 12
    IDENTIFIER  shift, and go to state 13

    declCompIdentifier   go to state 14
    pDeclIdentifier      go to state 34
    arrayDeclIdentifier  go to state 16
    declIdentifier       go to state 17
    varDef               go to state 35


State 28

   21 arrayDeclIdentifier: pDeclIdentifier LBRACKET INTEGER • RBRACKET

    RBRACKET  shift, and go to state 36


State 29

   30 funcDef: basicType pDeclIdentifier funcLPAREN RPAREN • LBRACE blockItems RBRACE

    LBRACE  shift, and go to state 37


State 30

   34 funcFParam: basicType • pDeclIdentifier

    ADDR        shift, and go to state 11
    MUL         shift, and go to state 12
    IDENTIFIER  shift, and go to state 13

    pDeclIdentifier  go to state 38
    declIdentifier   go to state 17


State 31

   29 funcDef: basicType pDeclIdentifier funcLPAREN funcFParams • RPAREN LBRACE blockItems RBRACE
   33 funcFParams: funcFParams • COMMA funcFParam

    COMMA   shift, and go to state 39
    RPAREN  shift, and go to state 40


State 32

   32 funcFParams: funcFParam •

    $default  reduce using rule 32 (funcFParams)


State 33

   22 arrayDeclIdentifier: arrayDeclIdentifier LBRACKET INTEGER • RBRACKET

    RBRACKET  shift, and go to state 41


State 34

   16 declCompIdentifier: pDeclIdentifier •
   21 arrayDeclIdentifier: pDeclIdentifier • LBRACKET INTEGER RBRACKET

    LBRACKET  shift, and go to state 23

    $default  reduce using rule 16 (declCompIdentifier)


State 35

   27 varDefs: varDefs COMMA varDef •

    $default  reduce using rule 27 (varDefs)


State 36

   21 arrayDeclIdentifier: pDeclIdentifier LBRACKET INTEGER RBRACKET •

    $default  reduce using rule 21 (arrayDeclIdentifier)


State 37

   30 funcDef: basicType pDeclIdentifier funcLPAREN RPAREN LBRACE • blockItems RBRACE

    T_INT       shift, and go to state 1
    T_VOID      shift, and go to state 2
    ADDR        shift, and go to state 42
    SEMICOLON   shift, and go to state 43
    LPAREN      shift, and go to state 44
    LBRACE      shift, and go to state 45
    IF_         shift, and go to state 46
    WHILE_      shift, and go to state 47
    BREAK       shift, and go to state 48
    CONTINUE    shift, and go to state 49
    RETURN      shift, and go to state 50
    PLUS        shift, and go to state 51
    MINUS       shift, and go to state 52
    MUL         shift, and go to state 53
    NOT         shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    INTEGER     shift, and go to state 56

    basicType        go to state 57
    literalConst     go to state 58
    compIdentifier   go to state 59
    pIdentifier      go to state 60
    arrayIdentifier  go to state 61
    identifier       go to state 62
    decl             go to state 63
    varDecl          go to state 6
    block            go to state 64
    blockLBRACE      go to state 65
    blockItems       go to state 66
    blockItem        go to state 67
    stmt             go to state 68
    IF               go to state 69
    WHILE            go to state 70
    expr             go to state 71
    addExpr          go to state 72
    mulExpr          go to state 73
    unaryExpr        go to state 74
    primaryExpr      go to state 75


State 38

   34 funcFParam: basicType pDeclIdentifier •

    $default  reduce using rule 34 (funcFParam)


State 39

   33 funcFParams: funcFParams COMMA • funcFParam

    T_INT   shift, and go to state 1
    T_VOID  shift, and go to state 2

    basicType   go to state 30
    funcFParam  go to state 76


State 40

   29 funcDef: basicType pDeclIdentifier funcLPAREN funcFParams RPAREN • LBRACE blockItems RBRACE

    LBRACE  shift, and go to state 77


State 41

   22 arrayDeclIdentifier: arrayDeclIdentifier LBRACKET INTEGER RBRACKET •

    $default  reduce using rule 22 (arrayDeclIdentifier)


State 42

   12 pIdentifier: ADDR • pIdentifier

    ADDR        shift, and go to state 42
    MUL         shift, and go to state 53
    IDENTIFIER  shift, and go to state 55

    pIdentifier  go to state 78
    identifier   go to state 62


State 43

   44 stmt: SEMICOLON •

    $default  reduce using rule 44 (stmt)


State 44

   77 primaryExpr: LPAREN • expr RPAREN
   78            | LPAREN • cond RPAREN

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 51
    MINUS       shift, and go to state 52
    MUL         shift, and go to state 53
    NOT         shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    INTEGER     shift, and go to state 56

    literalConst     go to state 58
    compIdentifier   go to state 59
    pIdentifier      go to state 60
    arrayIdentifier  go to state 61
    identifier       go to state 62
    expr             go to state 79
    cond             go to state 80
    addExpr          go to state 72
    mulExpr          go to state 73
    unaryExpr        go to state 74
    primaryExpr      go to state 75
    LOrExpr          go to state 81
    LAndExpr         go to state 82
    eqExpr           go to state 83
    relExpr          go to state 84


State 45

   36 blockLBRACE: LBRACE •

    $default  reduce using rule 36 (blockLBRACE)


State 46

   54 IF: IF_ •

    $default  reduce using rule 54 (IF)


State 47

   55 WHILE: WHILE_ •

    $default  reduce using rule 55 (WHILE)


State 48

   50 stmt: BREAK • SEMICOLON

    SEMICOLON  shift, and go to state 85


State 49

   51 stmt: CONTINUE • SEMICOLON

    SEMICOLON  shift, and go to state 86


State 50

   52 stmt: RETURN • SEMICOLON
   53     | RETURN • expr SEMICOLON

    ADDR        shift, and go to state 42
    SEMICOLON   shift, and go to state 87
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 51
    MINUS       shift, and go to state 52
    MUL         shift, and go to state 53
    NOT         shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    INTEGER     shift, and go to state 56

    literalConst     go to state 58
    compIdentifier   go to state 59
    pIdentifier      go to state 60
    arrayIdentifier  go to state 61
    identifier       go to state 62
    expr             go to state 88
    addExpr          go to state 72
    mulExpr          go to state 73
    unaryExpr        go to state 74
    primaryExpr      go to state 75


State 51

   72 unaryExpr: PLUS • primaryExpr

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    MUL         shift, and go to state 53
    IDENTIFIER  shift, and go to state 55
    INTEGER     shift, and go to state 56

    literalConst     go to state 58
    compIdentifier   go to state 89
    pIdentifier      go to state 90
    arrayIdentifier  go to state 61
    identifier       go to state 62
    primaryExpr      go to state 91


State 52

   73 unaryExpr: MINUS • primaryExpr

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    MUL         shift, and go to state 53
    IDENTIFIER  shift, and go to state 55
    INTEGER     shift, and go to state 56

    literalConst     go to state 58
    compIdentifier   go to state 89
    pIdentifier      go to state 90
    arrayIdentifier  go to state 61
    identifier       go to state 62
    primaryExpr      go to state 92


State 53

   11 pIdentifier: MUL • pIdentifier

    ADDR        shift, and go to state 42
    MUL         shift, and go to state 53
    IDENTIFIER  shift, and go to state 55

    pIdentifier  go to state 93
    identifier   go to state 62


State 54

   71 unaryExpr: NOT • cond

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 51
    MINUS       shift, and go to state 52
    MUL         shift, and go to state 53
    NOT         shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    INTEGER     shift, and go to state 56

    literalConst     go to state 58
    compIdentifier   go to state 59
    pIdentifier      go to state 60
    arrayIdentifier  go to state 61
    identifier       go to state 62
    expr             go to state 94
    cond             go to state 95
    addExpr          go to state 72
    mulExpr          go to state 73
    unaryExpr        go to state 74
    primaryExpr      go to state 75
    LOrExpr          go to state 81
    LAndExpr         go to state 82
    eqExpr           go to state 83
    relExpr          go to state 84


State 55

   15 identifier: IDENTIFIER •

    $default  reduce using rule 15 (identifier)


State 56

    7 literalConst: INTEGER •

    $default  reduce using rule 7 (literalConst)


State 57

   25 varDecl: basicType • varDefs SEMICOLON

    ADDR        shift, and go to state 11
    MUL         shift, and go to state 12
    IDENTIFIER  shift, and go to state 13

    declCompIdentifier   go to state 14
    pDeclIdentifier      go to state 34
    arrayDeclIdentifier  go to state 16
    declIdentifier       go to state 17
    varDefs              go to state 18
    varDef               go to state 19


State 58

   76 primaryExpr: literalConst •

    $default  reduce using rule 76 (primaryExpr)


State 59

   57 expr: compIdentifier • ASSIGN expr
   58     | compIdentifier • PLUSASSIGN expr
   59     | compIdentifier • MINUSASSIGN expr
   60     | compIdentifier • MULASSIGN expr
   61     | compIdentifier • DIVASSIGN expr
   81 primaryExpr: compIdentifier •

    ASSIGN       shift, and go to state 96
    PLUSASSIGN   shift, and go to state 97
    MINUSASSIGN  shift, and go to state 98
    MULASSIGN    shift, and go to state 99
    DIVASSIGN    shift, and go to state 100

    $default  reduce using rule 81 (primaryExpr)


State 60

    8 compIdentifier: pIdentifier •
   13 arrayIdentifier: pIdentifier • LBRACKET expr RBRACKET
   74 unaryExpr: pIdentifier • INC
   75          | pIdentifier • DEC
   79 primaryExpr: pIdentifier • LPAREN funcRParams RPAREN
   80            | pIdentifier • LPAREN RPAREN

    LPAREN    shift, and go to state 101
    LBRACKET  shift, and go to state 102
    INC       shift, and go to state 103
    DEC       shift, and go to state 104

    $default  reduce using rule 8 (compIdentifier)


State 61

    9 compIdentifier: arrayIdentifier •
   14 arrayIdentifier: arrayIdentifier • LBRACKET expr RBRACKET

    LBRACKET  shift, and go to state 105

    $default  reduce using rule 9 (compIdentifier)


State 62

   10 pIdentifier: identifier •

    $default  reduce using rule 10 (pIdentifier)


State 63

   40 blockItem: decl •

    $default  reduce using rule 40 (blockItem)


State 64

   46 stmt: block •

    $default  reduce using rule 46 (stmt)


State 65

   35 block: blockLBRACE • blockItems blockRBRACE

    T_INT       shift, and go to state 1
    T_VOID      shift, and go to state 2
    ADDR        shift, and go to state 42
    SEMICOLON   shift, and go to state 43
    LPAREN      shift, and go to state 44
    LBRACE      shift, and go to state 45
    IF_         shift, and go to state 46
    WHILE_      shift, and go to state 47
    BREAK       shift, and go to state 48
    CONTINUE    shift, and go to state 49
    RETURN      shift, and go to state 50
    PLUS        shift, and go to state 51
    MINUS       shift, and go to state 52
    MUL         shift, and go to state 53
    NOT         shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    INTEGER     shift, and go to state 56

    basicType        go to state 57
    literalConst     go to state 58
    compIdentifier   go to state 59
    pIdentifier      go to state 60
    arrayIdentifier  go to state 61
    identifier       go to state 62
    decl             go to state 63
    varDecl          go to state 6
    block            go to state 64
    blockLBRACE      go to state 65
    blockItems       go to state 106
    blockItem        go to state 67
    stmt             go to state 68
    IF               go to state 69
    WHILE            go to state 70
    expr             go to state 71
    addExpr          go to state 72
    mulExpr          go to state 73
    unaryExpr        go to state 74
    primaryExpr      go to state 75


State 66

   30 funcDef: basicType pDeclIdentifier funcLPAREN RPAREN LBRACE blockItems • RBRACE
   39 blockItems: blockItems • blockItem

    T_INT       shift, and go to state 1
    T_VOID      shift, and go to state 2
    ADDR        shift, and go to state 42
    SEMICOLON   shift, and go to state 43
    LPAREN      shift, and go to state 44
    LBRACE      shift, and go to state 45
    RBRACE      shift, and go to state 107
    IF_         shift, and go to state 46
    WHILE_      shift, and go to state 47
    BREAK       shift, and go to state 48
    CONTINUE    shift, and go to state 49
    RETURN      shift, and go to state 50
    PLUS        shift, and go to state 51
    MINUS       shift, and go to state 52
    MUL         shift, and go to state 53
    NOT         shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    INTEGER     shift, and go to state 56

    basicType        go to state 57
    literalConst     go to state 58
    compIdentifier   go to state 59
    pIdentifier      go to state 60
    arrayIdentifier  go to state 61
    identifier       go to state 62
    decl             go to state 63
    varDecl          go to state 6
    block            go to state 64
    blockLBRACE      go to state 65
    blockItem        go to state 108
    stmt             go to state 68
    IF               go to state 69
    WHILE            go to state 70
    expr             go to state 71
    addExpr          go to state 72
    mulExpr          go to state 73
    unaryExpr        go to state 74
    primaryExpr      go to state 75


State 67

   38 blockItems: blockItem •

    $default  reduce using rule 38 (blockItems)


State 68

   41 blockItem: stmt •

    $default  reduce using rule 41 (blockItem)


State 69

   47 stmt: IF • LPAREN cond RPAREN stmt_ ELSE stmt_
   48     | IF • LPAREN cond RPAREN stmt_

    LPAREN  shift, and go to state 109


State 70

   49 stmt: WHILE • LPAREN cond RPAREN stmt_

    LPAREN  shift, and go to state 110


State 71

   45 stmt: expr • SEMICOLON

    SEMICOLON  shift, and go to state 111


State 72

   56 expr: addExpr •
   64 addExpr: addExpr • PLUS mulExpr
   65        | addExpr • MINUS mulExpr

    PLUS   shift, and go to state 112
    MINUS  shift, and go to state 113

    PLUS      [reduce using rule 56 (expr)]
    MINUS     [reduce using rule 56 (expr)]
    $default  reduce using rule 56 (expr)


State 73

   63 addExpr: mulExpr •
   67 mulExpr: mulExpr • MUL unaryExpr
   68        | mulExpr • DIV unaryExpr
   69        | mulExpr • MOD unaryExpr

    MUL  shift, and go to state 114
    DIV  shift, and go to state 115
    MOD  shift, and go to state 116

    MUL       [reduce using rule 63 (addExpr)]
    DIV       [reduce using rule 63 (addExpr)]
    MOD       [reduce using rule 63 (addExpr)]
    $default  reduce using rule 63 (addExpr)


State 74

   66 mulExpr: unaryExpr •

    $default  reduce using rule 66 (mulExpr)


State 75

   70 unaryExpr: primaryExpr •

    $default  reduce using rule 70 (unaryExpr)


State 76

   33 funcFParams: funcFParams COMMA funcFParam •

    $default  reduce using rule 33 (funcFParams)


State 77

   29 funcDef: basicType pDeclIdentifier funcLPAREN funcFParams RPAREN LBRACE • blockItems RBRACE

    T_INT       shift, and go to state 1
    T_VOID      shift, and go to state 2
    ADDR        shift, and go to state 42
    SEMICOLON   shift, and go to state 43
    LPAREN      shift, and go to state 44
    LBRACE      shift, and go to state 45
    IF_         shift, and go to state 46
    WHILE_      shift, and go to state 47
    BREAK       shift, and go to state 48
    CONTINUE    shift, and go to state 49
    RETURN      shift, and go to state 50
    PLUS        shift, and go to state 51
    MINUS       shift, and go to state 52
    MUL         shift, and go to state 53
    NOT         shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    INTEGER     shift, and go to state 56

    basicType        go to state 57
    literalConst     go to state 58
    compIdentifier   go to state 59
    pIdentifier      go to state 60
    arrayIdentifier  go to state 61
    identifier       go to state 62
    decl             go to state 63
    varDecl          go to state 6
    block            go to state 64
    blockLBRACE      go to state 65
    blockItems       go to state 117
    blockItem        go to state 67
    stmt             go to state 68
    IF               go to state 69
    WHILE            go to state 70
    expr             go to state 71
    addExpr          go to state 72
    mulExpr          go to state 73
    unaryExpr        go to state 74
    primaryExpr      go to state 75


State 78

   12 pIdentifier: ADDR pIdentifier •

    $default  reduce using rule 12 (pIdentifier)


State 79

   77 primaryExpr: LPAREN expr • RPAREN
   91 relExpr: expr •

    RPAREN  shift, and go to state 118

    RPAREN    [reduce using rule 91 (relExpr)]
    $default  reduce using rule 91 (relExpr)


State 80

   78 primaryExpr: LPAREN cond • RPAREN

    RPAREN  shift, and go to state 119


State 81

   62 cond: LOrExpr •

    $default  reduce using rule 62 (cond)


State 82

   84 LOrExpr: LAndExpr •
   85        | LAndExpr • OR LOrExpr

    OR  shift, and go to state 120

    OR        [reduce using rule 84 (LOrExpr)]
    $default  reduce using rule 84 (LOrExpr)


State 83

   86 LAndExpr: eqExpr •
   87         | eqExpr • AND LAndExpr

    AND  shift, and go to state 121

    AND       [reduce using rule 86 (LAndExpr)]
    $default  reduce using rule 86 (LAndExpr)


State 84

   88 eqExpr: relExpr •
   89       | relExpr • EQ eqExpr
   90       | relExpr • NEQ eqExpr
   92 relExpr: relExpr • GRA expr
   93        | relExpr • LES expr
   94        | relExpr • GRAEQ expr
   95        | relExpr • LESEQ expr

    EQ     shift, and go to state 122
    GRAEQ  shift, and go to state 123
    LESEQ  shift, and go to state 124
    NEQ    shift, and go to state 125
    GRA    shift, and go to state 126
    LES    shift, and go to state 127

    EQ        [reduce using rule 88 (eqExpr)]
    GRAEQ     [reduce using rule 88 (eqExpr)]
    LESEQ     [reduce using rule 88 (eqExpr)]
    NEQ       [reduce using rule 88 (eqExpr)]
    GRA       [reduce using rule 88 (eqExpr)]
    LES       [reduce using rule 88 (eqExpr)]
    $default  reduce using rule 88 (eqExpr)


State 85

   50 stmt: BREAK SEMICOLON •

    $default  reduce using rule 50 (stmt)


State 86

   51 stmt: CONTINUE SEMICOLON •

    $default  reduce using rule 51 (stmt)


State 87

   52 stmt: RETURN SEMICOLON •

    $default  reduce using rule 52 (stmt)


State 88

   53 stmt: RETURN expr • SEMICOLON

    SEMICOLON  shift, and go to state 128


State 89

   81 primaryExpr: compIdentifier •

    $default  reduce using rule 81 (primaryExpr)


State 90

    8 compIdentifier: pIdentifier •
   13 arrayIdentifier: pIdentifier • LBRACKET expr RBRACKET
   79 primaryExpr: pIdentifier • LPAREN funcRParams RPAREN
   80            | pIdentifier • LPAREN RPAREN

    LPAREN    shift, and go to state 101
    LBRACKET  shift, and go to state 102

    $default  reduce using rule 8 (compIdentifier)


State 91

   72 unaryExpr: PLUS primaryExpr •

    $default  reduce using rule 72 (unaryExpr)


State 92

   73 unaryExpr: MINUS primaryExpr •

    $default  reduce using rule 73 (unaryExpr)


State 93

   11 pIdentifier: MUL pIdentifier •

    $default  reduce using rule 11 (pIdentifier)


State 94

   91 relExpr: expr •

    $default  reduce using rule 91 (relExpr)


State 95

   71 unaryExpr: NOT cond •

    $default  reduce using rule 71 (unaryExpr)


State 96

   57 expr: compIdentifier ASSIGN • expr

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 51
    MINUS       shift, and go to state 52
    MUL         shift, and go to state 53
    NOT         shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    INTEGER     shift, and go to state 56

    literalConst     go to state 58
    compIdentifier   go to state 59
    pIdentifier      go to state 60
    arrayIdentifier  go to state 61
    identifier       go to state 62
    expr             go to state 129
    addExpr          go to state 72
    mulExpr          go to state 73
    unaryExpr        go to state 74
    primaryExpr      go to state 75


State 97

   58 expr: compIdentifier PLUSASSIGN • expr

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 51
    MINUS       shift, and go to state 52
    MUL         shift, and go to state 53
    NOT         shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    INTEGER     shift, and go to state 56

    literalConst     go to state 58
    compIdentifier   go to state 59
    pIdentifier      go to state 60
    arrayIdentifier  go to state 61
    identifier       go to state 62
    expr             go to state 130
    addExpr          go to state 72
    mulExpr          go to state 73
    unaryExpr        go to state 74
    primaryExpr      go to state 75


State 98

   59 expr: compIdentifier MINUSASSIGN • expr

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 51
    MINUS       shift, and go to state 52
    MUL         shift, and go to state 53
    NOT         shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    INTEGER     shift, and go to state 56

    literalConst     go to state 58
    compIdentifier   go to state 59
    pIdentifier      go to state 60
    arrayIdentifier  go to state 61
    identifier       go to state 62
    expr             go to state 131
    addExpr          go to state 72
    mulExpr          go to state 73
    unaryExpr        go to state 74
    primaryExpr      go to state 75


State 99

   60 expr: compIdentifier MULASSIGN • expr

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 51
    MINUS       shift, and go to state 52
    MUL         shift, and go to state 53
    NOT         shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    INTEGER     shift, and go to state 56

    literalConst     go to state 58
    compIdentifier   go to state 59
    pIdentifier      go to state 60
    arrayIdentifier  go to state 61
    identifier       go to state 62
    expr             go to state 132
    addExpr          go to state 72
    mulExpr          go to state 73
    unaryExpr        go to state 74
    primaryExpr      go to state 75


State 100

   61 expr: compIdentifier DIVASSIGN • expr

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 51
    MINUS       shift, and go to state 52
    MUL         shift, and go to state 53
    NOT         shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    INTEGER     shift, and go to state 56

    literalConst     go to state 58
    compIdentifier   go to state 59
    pIdentifier      go to state 60
    arrayIdentifier  go to state 61
    identifier       go to state 62
    expr             go to state 133
    addExpr          go to state 72
    mulExpr          go to state 73
    unaryExpr        go to state 74
    primaryExpr      go to state 75


State 101

   79 primaryExpr: pIdentifier LPAREN • funcRParams RPAREN
   80            | pIdentifier LPAREN • RPAREN

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    RPAREN      shift, and go to state 134
    PLUS        shift, and go to state 51
    MINUS       shift, and go to state 52
    MUL         shift, and go to state 53
    NOT         shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    INTEGER     shift, and go to state 56

    literalConst     go to state 58
    compIdentifier   go to state 59
    pIdentifier      go to state 60
    arrayIdentifier  go to state 61
    identifier       go to state 62
    expr             go to state 135
    addExpr          go to state 72
    mulExpr          go to state 73
    unaryExpr        go to state 74
    primaryExpr      go to state 75
    funcRParams      go to state 136


State 102

   13 arrayIdentifier: pIdentifier LBRACKET • expr RBRACKET

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 51
    MINUS       shift, and go to state 52
    MUL         shift, and go to state 53
    NOT         shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    INTEGER     shift, and go to state 56

    literalConst     go to state 58
    compIdentifier   go to state 59
    pIdentifier      go to state 60
    arrayIdentifier  go to state 61
    identifier       go to state 62
    expr             go to state 137
    addExpr          go to state 72
    mulExpr          go to state 73
    unaryExpr        go to state 74
    primaryExpr      go to state 75


State 103

   74 unaryExpr: pIdentifier INC •

    $default  reduce using rule 74 (unaryExpr)


State 104

   75 unaryExpr: pIdentifier DEC •

    $default  reduce using rule 75 (unaryExpr)


State 105

   14 arrayIdentifier: arrayIdentifier LBRACKET • expr RBRACKET

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 51
    MINUS       shift, and go to state 52
    MUL         shift, and go to state 53
    NOT         shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    INTEGER     shift, and go to state 56

    literalConst     go to state 58
    compIdentifier   go to state 59
    pIdentifier      go to state 60
    arrayIdentifier  go to state 61
    identifier       go to state 62
    expr             go to state 138
    addExpr          go to state 72
    mulExpr          go to state 73
    unaryExpr        go to state 74
    primaryExpr      go to state 75


State 106

   35 block: blockLBRACE blockItems • blockRBRACE
   39 blockItems: blockItems • blockItem

    T_INT       shift, and go to state 1
    T_VOID      shift, and go to state 2
    ADDR        shift, and go to state 42
    SEMICOLON   shift, and go to state 43
    LPAREN      shift, and go to state 44
    LBRACE      shift, and go to state 45
    RBRACE      shift, and go to state 139
    IF_         shift, and go to state 46
    WHILE_      shift, and go to state 47
    BREAK       shift, and go to state 48
    CONTINUE    shift, and go to state 49
    RETURN      shift, and go to state 50
    PLUS        shift, and go to state 51
    MINUS       shift, and go to state 52
    MUL         shift, and go to state 53
    NOT         shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    INTEGER     shift, and go to state 56

    basicType        go to state 57
    literalConst     go to state 58
    compIdentifier   go to state 59
    pIdentifier      go to state 60
    arrayIdentifier  go to state 61
    identifier       go to state 62
    decl             go to state 63
    varDecl          go to state 6
    block            go to state 64
    blockLBRACE      go to state 65
    blockRBRACE      go to state 140
    blockItem        go to state 108
    stmt             go to state 68
    IF               go to state 69
    WHILE            go to state 70
    expr             go to state 71
    addExpr          go to state 72
    mulExpr          go to state 73
    unaryExpr        go to state 74
    primaryExpr      go to state 75


State 107

   30 funcDef: basicType pDeclIdentifier funcLPAREN RPAREN LBRACE blockItems RBRACE •

    $default  reduce using rule 30 (funcDef)


State 108

   39 blockItems: blockItems blockItem •

    $default  reduce using rule 39 (blockItems)


State 109

   47 stmt: IF LPAREN • cond RPAREN stmt_ ELSE stmt_
   48     | IF LPAREN • cond RPAREN stmt_

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 51
    MINUS       shift, and go to state 52
    MUL         shift, and go to state 53
    NOT         shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    INTEGER     shift, and go to state 56

    literalConst     go to state 58
    compIdentifier   go to state 59
    pIdentifier      go to state 60
    arrayIdentifier  go to state 61
    identifier       go to state 62
    expr             go to state 94
    cond             go to state 141
    addExpr          go to state 72
    mulExpr          go to state 73
    unaryExpr        go to state 74
    primaryExpr      go to state 75
    LOrExpr          go to state 81
    LAndExpr         go to state 82
    eqExpr           go to state 83
    relExpr          go to state 84


State 110

   49 stmt: WHILE LPAREN • cond RPAREN stmt_

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 51
    MINUS       shift, and go to state 52
    MUL         shift, and go to state 53
    NOT         shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    INTEGER     shift, and go to state 56

    literalConst     go to state 58
    compIdentifier   go to state 59
    pIdentifier      go to state 60
    arrayIdentifier  go to state 61
    identifier       go to state 62
    expr             go to state 94
    cond             go to state 142
    addExpr          go to state 72
    mulExpr          go to state 73
    unaryExpr        go to state 74
    primaryExpr      go to state 75
    LOrExpr          go to state 81
    LAndExpr         go to state 82
    eqExpr           go to state 83
    relExpr          go to state 84


State 111

   45 stmt: expr SEMICOLON •

    $default  reduce using rule 45 (stmt)


State 112

   64 addExpr: addExpr PLUS • mulExpr

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 51
    MINUS       shift, and go to state 52
    MUL         shift, and go to state 53
    NOT         shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    INTEGER     shift, and go to state 56

    literalConst     go to state 58
    compIdentifier   go to state 89
    pIdentifier      go to state 60
    arrayIdentifier  go to state 61
    identifier       go to state 62
    mulExpr          go to state 143
    unaryExpr        go to state 74
    primaryExpr      go to state 75


State 113

   65 addExpr: addExpr MINUS • mulExpr

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 51
    MINUS       shift, and go to state 52
    MUL         shift, and go to state 53
    NOT         shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    INTEGER     shift, and go to state 56

    literalConst     go to state 58
    compIdentifier   go to state 89
    pIdentifier      go to state 60
    arrayIdentifier  go to state 61
    identifier       go to state 62
    mulExpr          go to state 144
    unaryExpr        go to state 74
    primaryExpr      go to state 75


State 114

   67 mulExpr: mulExpr MUL • unaryExpr

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 51
    MINUS       shift, and go to state 52
    MUL         shift, and go to state 53
    NOT         shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    INTEGER     shift, and go to state 56

    literalConst     go to state 58
    compIdentifier   go to state 89
    pIdentifier      go to state 60
    arrayIdentifier  go to state 61
    identifier       go to state 62
    unaryExpr        go to state 145
    primaryExpr      go to state 75


State 115

   68 mulExpr: mulExpr DIV • unaryExpr

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 51
    MINUS       shift, and go to state 52
    MUL         shift, and go to state 53
    NOT         shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    INTEGER     shift, and go to state 56

    literalConst     go to state 58
    compIdentifier   go to state 89
    pIdentifier      go to state 60
    arrayIdentifier  go to state 61
    identifier       go to state 62
    unaryExpr        go to state 146
    primaryExpr      go to state 75


State 116

   69 mulExpr: mulExpr MOD • unaryExpr

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 51
    MINUS       shift, and go to state 52
    MUL         shift, and go to state 53
    NOT         shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    INTEGER     shift, and go to state 56

    literalConst     go to state 58
    compIdentifier   go to state 89
    pIdentifier      go to state 60
    arrayIdentifier  go to state 61
    identifier       go to state 62
    unaryExpr        go to state 147
    primaryExpr      go to state 75


State 117

   29 funcDef: basicType pDeclIdentifier funcLPAREN funcFParams RPAREN LBRACE blockItems • RBRACE
   39 blockItems: blockItems • blockItem

    T_INT       shift, and go to state 1
    T_VOID      shift, and go to state 2
    ADDR        shift, and go to state 42
    SEMICOLON   shift, and go to state 43
    LPAREN      shift, and go to state 44
    LBRACE      shift, and go to state 45
    RBRACE      shift, and go to state 148
    IF_         shift, and go to state 46
    WHILE_      shift, and go to state 47
    BREAK       shift, and go to state 48
    CONTINUE    shift, and go to state 49
    RETURN      shift, and go to state 50
    PLUS        shift, and go to state 51
    MINUS       shift, and go to state 52
    MUL         shift, and go to state 53
    NOT         shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    INTEGER     shift, and go to state 56

    basicType        go to state 57
    literalConst     go to state 58
    compIdentifier   go to state 59
    pIdentifier      go to state 60
    arrayIdentifier  go to state 61
    identifier       go to state 62
    decl             go to state 63
    varDecl          go to state 6
    block            go to state 64
    blockLBRACE      go to state 65
    blockItem        go to state 108
    stmt             go to state 68
    IF               go to state 69
    WHILE            go to state 70
    expr             go to state 71
    addExpr          go to state 72
    mulExpr          go to state 73
    unaryExpr        go to state 74
    primaryExpr      go to state 75


State 118

   77 primaryExpr: LPAREN expr RPAREN •

    $default  reduce using rule 77 (primaryExpr)


State 119

   78 primaryExpr: LPAREN cond RPAREN •

    $default  reduce using rule 78 (primaryExpr)


State 120

   85 LOrExpr: LAndExpr OR • LOrExpr

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 51
    MINUS       shift, and go to state 52
    MUL         shift, and go to state 53
    NOT         shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    INTEGER     shift, and go to state 56

    literalConst     go to state 58
    compIdentifier   go to state 59
    pIdentifier      go to state 60
    arrayIdentifier  go to state 61
    identifier       go to state 62
    expr             go to state 94
    addExpr          go to state 72
    mulExpr          go to state 73
    unaryExpr        go to state 74
    primaryExpr      go to state 75
    LOrExpr          go to state 149
    LAndExpr         go to state 82
    eqExpr           go to state 83
    relExpr          go to state 84


State 121

   87 LAndExpr: eqExpr AND • LAndExpr

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 51
    MINUS       shift, and go to state 52
    MUL         shift, and go to state 53
    NOT         shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    INTEGER     shift, and go to state 56

    literalConst     go to state 58
    compIdentifier   go to state 59
    pIdentifier      go to state 60
    arrayIdentifier  go to state 61
    identifier       go to state 62
    expr             go to state 94
    addExpr          go to state 72
    mulExpr          go to state 73
    unaryExpr        go to state 74
    primaryExpr      go to state 75
    LAndExpr         go to state 150
    eqExpr           go to state 83
    relExpr          go to state 84


State 122

   89 eqExpr: relExpr EQ • eqExpr

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 51
    MINUS       shift, and go to state 52
    MUL         shift, and go to state 53
    NOT         shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    INTEGER     shift, and go to state 56

    literalConst     go to state 58
    compIdentifier   go to state 59
    pIdentifier      go to state 60
    arrayIdentifier  go to state 61
    identifier       go to state 62
    expr             go to state 94
    addExpr          go to state 72
    mulExpr          go to state 73
    unaryExpr        go to state 74
    primaryExpr      go to state 75
    eqExpr           go to state 151
    relExpr          go to state 84


State 123

   94 relExpr: relExpr GRAEQ • expr

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 51
    MINUS       shift, and go to state 52
    MUL         shift, and go to state 53
    NOT         shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    INTEGER     shift, and go to state 56

    literalConst     go to state 58
    compIdentifier   go to state 59
    pIdentifier      go to state 60
    arrayIdentifier  go to state 61
    identifier       go to state 62
    expr             go to state 152
    addExpr          go to state 72
    mulExpr          go to state 73
    unaryExpr        go to state 74
    primaryExpr      go to state 75


State 124

   95 relExpr: relExpr LESEQ • expr

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 51
    MINUS       shift, and go to state 52
    MUL         shift, and go to state 53
    NOT         shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    INTEGER     shift, and go to state 56

    literalConst     go to state 58
    compIdentifier   go to state 59
    pIdentifier      go to state 60
    arrayIdentifier  go to state 61
    identifier       go to state 62
    expr             go to state 153
    addExpr          go to state 72
    mulExpr          go to state 73
    unaryExpr        go to state 74
    primaryExpr      go to state 75


State 125

   90 eqExpr: relExpr NEQ • eqExpr

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 51
    MINUS       shift, and go to state 52
    MUL         shift, and go to state 53
    NOT         shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    INTEGER     shift, and go to state 56

    literalConst     go to state 58
    compIdentifier   go to state 59
    pIdentifier      go to state 60
    arrayIdentifier  go to state 61
    identifier       go to state 62
    expr             go to state 94
    addExpr          go to state 72
    mulExpr          go to state 73
    unaryExpr        go to state 74
    primaryExpr      go to state 75
    eqExpr           go to state 154
    relExpr          go to state 84


State 126

   92 relExpr: relExpr GRA • expr

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 51
    MINUS       shift, and go to state 52
    MUL         shift, and go to state 53
    NOT         shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    INTEGER     shift, and go to state 56

    literalConst     go to state 58
    compIdentifier   go to state 59
    pIdentifier      go to state 60
    arrayIdentifier  go to state 61
    identifier       go to state 62
    expr             go to state 155
    addExpr          go to state 72
    mulExpr          go to state 73
    unaryExpr        go to state 74
    primaryExpr      go to state 75


State 127

   93 relExpr: relExpr LES • expr

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 51
    MINUS       shift, and go to state 52
    MUL         shift, and go to state 53
    NOT         shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    INTEGER     shift, and go to state 56

    literalConst     go to state 58
    compIdentifier   go to state 59
    pIdentifier      go to state 60
    arrayIdentifier  go to state 61
    identifier       go to state 62
    expr             go to state 156
    addExpr          go to state 72
    mulExpr          go to state 73
    unaryExpr        go to state 74
    primaryExpr      go to state 75


State 128

   53 stmt: RETURN expr SEMICOLON •

    $default  reduce using rule 53 (stmt)


State 129

   57 expr: compIdentifier ASSIGN expr •

    $default  reduce using rule 57 (expr)


State 130

   58 expr: compIdentifier PLUSASSIGN expr •

    $default  reduce using rule 58 (expr)


State 131

   59 expr: compIdentifier MINUSASSIGN expr •

    $default  reduce using rule 59 (expr)


State 132

   60 expr: compIdentifier MULASSIGN expr •

    $default  reduce using rule 60 (expr)


State 133

   61 expr: compIdentifier DIVASSIGN expr •

    $default  reduce using rule 61 (expr)


State 134

   80 primaryExpr: pIdentifier LPAREN RPAREN •

    $default  reduce using rule 80 (primaryExpr)


State 135

   82 funcRParams: expr •

    $default  reduce using rule 82 (funcRParams)


State 136

   79 primaryExpr: pIdentifier LPAREN funcRParams • RPAREN
   83 funcRParams: funcRParams • COMMA expr

    COMMA   shift, and go to state 157
    RPAREN  shift, and go to state 158


State 137

   13 arrayIdentifier: pIdentifier LBRACKET expr • RBRACKET

    RBRACKET  shift, and go to state 159


State 138

   14 arrayIdentifier: arrayIdentifier LBRACKET expr • RBRACKET

    RBRACKET  shift, and go to state 160


State 139

   37 blockRBRACE: RBRACE •

    $default  reduce using rule 37 (blockRBRACE)


State 140

   35 block: blockLBRACE blockItems blockRBRACE •

    $default  reduce using rule 35 (block)


State 141

   47 stmt: IF LPAREN cond • RPAREN stmt_ ELSE stmt_
   48     | IF LPAREN cond • RPAREN stmt_

    RPAREN  shift, and go to state 161


State 142

   49 stmt: WHILE LPAREN cond • RPAREN stmt_

    RPAREN  shift, and go to state 162


State 143

   64 addExpr: addExpr PLUS mulExpr •
   67 mulExpr: mulExpr • MUL unaryExpr
   68        | mulExpr • DIV unaryExpr
   69        | mulExpr • MOD unaryExpr

    MUL  shift, and go to state 114
    DIV  shift, and go to state 115
    MOD  shift, and go to state 116

    MUL       [reduce using rule 64 (addExpr)]
    DIV       [reduce using rule 64 (addExpr)]
    MOD       [reduce using rule 64 (addExpr)]
    $default  reduce using rule 64 (addExpr)


State 144

   65 addExpr: addExpr MINUS mulExpr •
   67 mulExpr: mulExpr • MUL unaryExpr
   68        | mulExpr • DIV unaryExpr
   69        | mulExpr • MOD unaryExpr

    MUL  shift, and go to state 114
    DIV  shift, and go to state 115
    MOD  shift, and go to state 116

    MUL       [reduce using rule 65 (addExpr)]
    DIV       [reduce using rule 65 (addExpr)]
    MOD       [reduce using rule 65 (addExpr)]
    $default  reduce using rule 65 (addExpr)


State 145

   67 mulExpr: mulExpr MUL unaryExpr •

    $default  reduce using rule 67 (mulExpr)


State 146

   68 mulExpr: mulExpr DIV unaryExpr •

    $default  reduce using rule 68 (mulExpr)


State 147

   69 mulExpr: mulExpr MOD unaryExpr •

    $default  reduce using rule 69 (mulExpr)


State 148

   29 funcDef: basicType pDeclIdentifier funcLPAREN funcFParams RPAREN LBRACE blockItems RBRACE •

    $default  reduce using rule 29 (funcDef)


State 149

   85 LOrExpr: LAndExpr OR LOrExpr •

    $default  reduce using rule 85 (LOrExpr)


State 150

   87 LAndExpr: eqExpr AND LAndExpr •

    $default  reduce using rule 87 (LAndExpr)


State 151

   89 eqExpr: relExpr EQ eqExpr •

    $default  reduce using rule 89 (eqExpr)


State 152

   94 relExpr: relExpr GRAEQ expr •

    $default  reduce using rule 94 (relExpr)


State 153

   95 relExpr: relExpr LESEQ expr •

    $default  reduce using rule 95 (relExpr)


State 154

   90 eqExpr: relExpr NEQ eqExpr •

    $default  reduce using rule 90 (eqExpr)


State 155

   92 relExpr: relExpr GRA expr •

    $default  reduce using rule 92 (relExpr)


State 156

   93 relExpr: relExpr LES expr •

    $default  reduce using rule 93 (relExpr)


State 157

   83 funcRParams: funcRParams COMMA • expr

    ADDR        shift, and go to state 42
    LPAREN      shift, and go to state 44
    PLUS        shift, and go to state 51
    MINUS       shift, and go to state 52
    MUL         shift, and go to state 53
    NOT         shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    INTEGER     shift, and go to state 56

    literalConst     go to state 58
    compIdentifier   go to state 59
    pIdentifier      go to state 60
    arrayIdentifier  go to state 61
    identifier       go to state 62
    expr             go to state 163
    addExpr          go to state 72
    mulExpr          go to state 73
    unaryExpr        go to state 74
    primaryExpr      go to state 75


State 158

   79 primaryExpr: pIdentifier LPAREN funcRParams RPAREN •

    $default  reduce using rule 79 (primaryExpr)


State 159

   13 arrayIdentifier: pIdentifier LBRACKET expr RBRACKET •

    $default  reduce using rule 13 (arrayIdentifier)


State 160

   14 arrayIdentifier: arrayIdentifier LBRACKET expr RBRACKET •

    $default  reduce using rule 14 (arrayIdentifier)


State 161

   47 stmt: IF LPAREN cond RPAREN • stmt_ ELSE stmt_
   48     | IF LPAREN cond RPAREN • stmt_

    ADDR        shift, and go to state 42
    SEMICOLON   shift, and go to state 43
    LPAREN      shift, and go to state 44
    LBRACE      shift, and go to state 164
    IF_         shift, and go to state 46
    WHILE_      shift, and go to state 47
    BREAK       shift, and go to state 48
    CONTINUE    shift, and go to state 49
    RETURN      shift, and go to state 50
    PLUS        shift, and go to state 51
    MINUS       shift, and go to state 52
    MUL         shift, and go to state 53
    NOT         shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    INTEGER     shift, and go to state 56

    literalConst     go to state 58
    compIdentifier   go to state 59
    pIdentifier      go to state 60
    arrayIdentifier  go to state 61
    identifier       go to state 62
    block            go to state 64
    blockLBRACE      go to state 65
    stmt_            go to state 165
    stmt             go to state 166
    IF               go to state 69
    WHILE            go to state 70
    expr             go to state 71
    addExpr          go to state 72
    mulExpr          go to state 73
    unaryExpr        go to state 74
    primaryExpr      go to state 75


State 162

   49 stmt: WHILE LPAREN cond RPAREN • stmt_

    ADDR        shift, and go to state 42
    SEMICOLON   shift, and go to state 43
    LPAREN      shift, and go to state 44
    LBRACE      shift, and go to state 164
    IF_         shift, and go to state 46
    WHILE_      shift, and go to state 47
    BREAK       shift, and go to state 48
    CONTINUE    shift, and go to state 49
    RETURN      shift, and go to state 50
    PLUS        shift, and go to state 51
    MINUS       shift, and go to state 52
    MUL         shift, and go to state 53
    NOT         shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    INTEGER     shift, and go to state 56

    literalConst     go to state 58
    compIdentifier   go to state 59
    pIdentifier      go to state 60
    arrayIdentifier  go to state 61
    identifier       go to state 62
    block            go to state 64
    blockLBRACE      go to state 65
    stmt_            go to state 167
    stmt             go to state 166
    IF               go to state 69
    WHILE            go to state 70
    expr             go to state 71
    addExpr          go to state 72
    mulExpr          go to state 73
    unaryExpr        go to state 74
    primaryExpr      go to state 75


State 163

   83 funcRParams: funcRParams COMMA expr •

    $default  reduce using rule 83 (funcRParams)


State 164

   36 blockLBRACE: LBRACE •
   42 stmt_: LBRACE • blockItems RBRACE

    T_INT       shift, and go to state 1
    T_VOID      shift, and go to state 2
    ADDR        shift, and go to state 42
    SEMICOLON   shift, and go to state 43
    LPAREN      shift, and go to state 44
    LBRACE      shift, and go to state 45
    IF_         shift, and go to state 46
    WHILE_      shift, and go to state 47
    BREAK       shift, and go to state 48
    CONTINUE    shift, and go to state 49
    RETURN      shift, and go to state 50
    PLUS        shift, and go to state 51
    MINUS       shift, and go to state 52
    MUL         shift, and go to state 53
    NOT         shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    INTEGER     shift, and go to state 56

    T_INT       [reduce using rule 36 (blockLBRACE)]
    T_VOID      [reduce using rule 36 (blockLBRACE)]
    ADDR        [reduce using rule 36 (blockLBRACE)]
    SEMICOLON   [reduce using rule 36 (blockLBRACE)]
    LPAREN      [reduce using rule 36 (blockLBRACE)]
    LBRACE      [reduce using rule 36 (blockLBRACE)]
    IF_         [reduce using rule 36 (blockLBRACE)]
    WHILE_      [reduce using rule 36 (blockLBRACE)]
    BREAK       [reduce using rule 36 (blockLBRACE)]
    CONTINUE    [reduce using rule 36 (blockLBRACE)]
    RETURN      [reduce using rule 36 (blockLBRACE)]
    PLUS        [reduce using rule 36 (blockLBRACE)]
    MINUS       [reduce using rule 36 (blockLBRACE)]
    MUL         [reduce using rule 36 (blockLBRACE)]
    NOT         [reduce using rule 36 (blockLBRACE)]
    IDENTIFIER  [reduce using rule 36 (blockLBRACE)]
    INTEGER     [reduce using rule 36 (blockLBRACE)]

    basicType        go to state 57
    literalConst     go to state 58
    compIdentifier   go to state 59
    pIdentifier      go to state 60
    arrayIdentifier  go to state 61
    identifier       go to state 62
    decl             go to state 63
    varDecl          go to state 6
    block            go to state 64
    blockLBRACE      go to state 65
    blockItems       go to state 168
    blockItem        go to state 67
    stmt             go to state 68
    IF               go to state 69
    WHILE            go to state 70
    expr             go to state 71
    addExpr          go to state 72
    mulExpr          go to state 73
    unaryExpr        go to state 74
    primaryExpr      go to state 75


State 165

   47 stmt: IF LPAREN cond RPAREN stmt_ • ELSE stmt_
   48     | IF LPAREN cond RPAREN stmt_ •

    ELSE  shift, and go to state 169

    ELSE      [reduce using rule 48 (stmt)]
    $default  reduce using rule 48 (stmt)


State 166

   43 stmt_: stmt •

    $default  reduce using rule 43 (stmt_)


State 167

   49 stmt: WHILE LPAREN cond RPAREN stmt_ •

    $default  reduce using rule 49 (stmt)


State 168

   39 blockItems: blockItems • blockItem
   42 stmt_: LBRACE blockItems • RBRACE

    T_INT       shift, and go to state 1
    T_VOID      shift, and go to state 2
    ADDR        shift, and go to state 42
    SEMICOLON   shift, and go to state 43
    LPAREN      shift, and go to state 44
    LBRACE      shift, and go to state 45
    RBRACE      shift, and go to state 170
    IF_         shift, and go to state 46
    WHILE_      shift, and go to state 47
    BREAK       shift, and go to state 48
    CONTINUE    shift, and go to state 49
    RETURN      shift, and go to state 50
    PLUS        shift, and go to state 51
    MINUS       shift, and go to state 52
    MUL         shift, and go to state 53
    NOT         shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    INTEGER     shift, and go to state 56

    basicType        go to state 57
    literalConst     go to state 58
    compIdentifier   go to state 59
    pIdentifier      go to state 60
    arrayIdentifier  go to state 61
    identifier       go to state 62
    decl             go to state 63
    varDecl          go to state 6
    block            go to state 64
    blockLBRACE      go to state 65
    blockItem        go to state 108
    stmt             go to state 68
    IF               go to state 69
    WHILE            go to state 70
    expr             go to state 71
    addExpr          go to state 72
    mulExpr          go to state 73
    unaryExpr        go to state 74
    primaryExpr      go to state 75


State 169

   47 stmt: IF LPAREN cond RPAREN stmt_ ELSE • stmt_

    ADDR        shift, and go to state 42
    SEMICOLON   shift, and go to state 43
    LPAREN      shift, and go to state 44
    LBRACE      shift, and go to state 164
    IF_         shift, and go to state 46
    WHILE_      shift, and go to state 47
    BREAK       shift, and go to state 48
    CONTINUE    shift, and go to state 49
    RETURN      shift, and go to state 50
    PLUS        shift, and go to state 51
    MINUS       shift, and go to state 52
    MUL         shift, and go to state 53
    NOT         shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    INTEGER     shift, and go to state 56

    literalConst     go to state 58
    compIdentifier   go to state 59
    pIdentifier      go to state 60
    arrayIdentifier  go to state 61
    identifier       go to state 62
    block            go to state 64
    blockLBRACE      go to state 65
    stmt_            go to state 171
    stmt             go to state 166
    IF               go to state 69
    WHILE            go to state 70
    expr             go to state 71
    addExpr          go to state 72
    mulExpr          go to state 73
    unaryExpr        go to state 74
    primaryExpr      go to state 75


State 170

   42 stmt_: LBRACE blockItems RBRACE •

    $default  reduce using rule 42 (stmt_)


State 171

   47 stmt: IF LPAREN cond RPAREN stmt_ ELSE stmt_ •

    $default  reduce using rule 47 (stmt)
